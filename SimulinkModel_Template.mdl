Model {
  Name			  "SimulinkModel_Template"
  Version		  7.9
  MdlSubVersion		  0
  GraphicalInterface {
    NumRootInports	    0
    NumRootOutports	    0
    ParameterArgumentNames  ""
    ComputedModelVersion    "1.1052"
    NumModelReferences	    0
    NumTestPointedSignals   0
  }
  SavedCharacterEncoding  "windows-1252"
  SaveDefaultBlockParams  on
  ScopeRefreshTime	  0.035000
  OverrideScopeRefreshTime on
  DisableAllScopes	  off
  DataTypeOverride	  "UseLocalSettings"
  DataTypeOverrideAppliesTo "AllNumericTypes"
  MinMaxOverflowLogging	  "ForceOff"
  MinMaxOverflowArchiveMode "Overwrite"
  FPTRunName		  "Run 1"
  MaxMDLFileLineLength	  120
  CloseFcn		  "rtwprivate ssgencode ModelCloseRequest hybriddaq1dof"
  Created		  "Mon Jan 01 12:00:00 2006"
  Creator		  "RTMD"
  UpdateHistory		  "UpdateHistoryNever"
  ModifiedByFormat	  "%<Auto>"
  LastModifiedBy	  "Thomas Marullo"
  ModifiedDateFormat	  "%<Auto>"
  LastModifiedDate	  "Wed Nov 14 16:19:31 2012"
  RTWModifiedTimeStamp	  274810025
  ModelVersionFormat	  "1.%<AutoIncrement:1052>"
  ConfigurationManager	  "None"
  SampleTimeColors	  off
  SampleTimeAnnotations	  off
  LibraryLinkDisplay	  "none"
  WideLines		  off
  ShowLineDimensions	  on
  ShowPortDataTypes	  off
  ShowDesignRanges	  off
  ShowLoopsOnError	  on
  IgnoreBidirectionalLines off
  ShowStorageClass	  off
  ShowTestPointIcons	  on
  ShowSignalResolutionIcons on
  ShowViewerIcons	  on
  SortedOrder		  off
  ExecutionContextIcon	  off
  ShowLinearizationAnnotations on
  BlockNameDataTip	  off
  BlockParametersDataTip  off
  BlockDescriptionStringDataTip	off
  ToolBar		  on
  StatusBar		  on
  BrowserShowLibraryLinks off
  BrowserLookUnderMasks	  off
  SimulationMode	  "normal"
  LinearizationMsg	  "none"
  Profile		  off
  ParamWorkspaceSource	  "MATLABWorkspace"
  AccelSystemTargetFile	  "accel.tlc"
  AccelTemplateMakefile	  "accel_default_tmf"
  AccelMakeCommand	  "make_rtw"
  TryForcingSFcnDF	  off
  RecordCoverage	  off
  CovPath		  "/"
  CovSaveName		  "covdata"
  CovMetricSettings	  "dw"
  CovNameIncrementing	  off
  CovHtmlReporting	  on
  CovForceBlockReductionOff on
  covSaveCumulativeToWorkspaceVar on
  CovSaveSingleToWorkspaceVar on
  CovCumulativeVarName	  "covCumulativeData"
  CovCumulativeReport	  off
  CovReportOnPause	  on
  CovModelRefEnable	  "Off"
  CovExternalEMLEnable	  off
  ExtModeBatchMode	  off
  ExtModeEnableFloating	  on
  ExtModeTrigType	  "manual"
  ExtModeTrigMode	  "normal"
  ExtModeTrigPort	  "1"
  ExtModeTrigElement	  "any"
  ExtModeTrigDuration	  1000
  ExtModeTrigDurationFloating "auto"
  ExtModeTrigHoldOff	  0
  ExtModeTrigDelay	  0
  ExtModeTrigDirection	  "rising"
  ExtModeTrigLevel	  0
  ExtModeArchiveMode	  "off"
  ExtModeAutoIncOneShot	  off
  ExtModeIncDirWhenArm	  off
  ExtModeAddSuffixToVar	  off
  ExtModeWriteAllDataToWs off
  ExtModeArmWhenConnect	  on
  ExtModeSkipDownloadWhenConnect off
  ExtModeLogAll		  on
  ExtModeAutoUpdateStatusClock on
  BufferReuse		  off
  ShowModelReferenceBlockVersion off
  ShowModelReferenceBlockIO off
  Array {
    Type		    "Handle"
    Dimension		    1
    Simulink.ConfigSet {
      $ObjectID		      1
      Version		      "1.12.0"
      Array {
	Type			"Handle"
	Dimension		8
	Simulink.SolverCC {
	  $ObjectID		  2
	  Version		  "1.12.0"
	  StartTime		  "0.0"
	  StopTime		  "RunningTime"
	  AbsTol		  "auto"
	  FixedStep		  "sample"
	  InitialStep		  "auto"
	  MaxNumMinSteps	  "-1"
	  MaxOrder		  5
	  ZcThreshold		  "auto"
	  ConsecutiveZCsStepRelTol "10*128*eps"
	  MaxConsecutiveZCs	  "1000"
	  ExtrapolationOrder	  4
	  NumberNewtonIterations  1
	  MaxStep		  "auto"
	  MinStep		  "auto"
	  MaxConsecutiveMinStep	  "1"
	  RelTol		  "1e-3"
	  SolverMode		  "MultiTasking"
	  EnableConcurrentExecution off
	  ConcurrentTasks	  off
	  Solver		  "FixedStepDiscrete"
	  SolverName		  "FixedStepDiscrete"
	  SolverJacobianMethodControl "auto"
	  ShapePreserveControl	  "DisableAll"
	  ZeroCrossControl	  "UseLocalSettings"
	  ZeroCrossAlgorithm	  "Nonadaptive"
	  AlgebraicLoopSolver	  "TrustRegion"
	  SolverResetMethod	  "Fast"
	  PositivePriorityOrder	  off
	  AutoInsertRateTranBlk	  off
	  SampleTimeConstraint	  "Unconstrained"
	  InsertRTBMode		  "Whenever possible"
	}
	Simulink.DataIOCC {
	  $ObjectID		  3
	  Version		  "1.12.0"
	  Decimation		  "1"
	  ExternalInput		  "[t, u]"
	  FinalStateName	  "xFinal"
	  InitialState		  "xInitial"
	  LimitDataPoints	  off
	  MaxDataPoints		  "1000"
	  LoadExternalInput	  off
	  LoadInitialState	  off
	  SaveFinalState	  off
	  SaveCompleteFinalSimState off
	  SaveFormat		  "Array"
	  SignalLoggingSaveFormat "ModelDataLogs"
	  SaveOutput		  on
	  SaveState		  off
	  SignalLogging		  on
	  DSMLogging		  on
	  InspectSignalLogs	  off
	  SaveTime		  on
	  ReturnWorkspaceOutputs  off
	  StateSaveName		  "xout"
	  TimeSaveName		  "tout"
	  OutputSaveName	  "yout"
	  SignalLoggingName	  "logsout"
	  DSMLoggingName	  "dsmout"
	  OutputOption		  "RefineOutputTimes"
	  OutputTimes		  "[]"
	  ReturnWorkspaceOutputsName "out"
	  Refine		  "1"
	}
	Simulink.OptimizationCC {
	  $ObjectID		  4
	  Version		  "1.12.0"
	  Array {
	    Type		    "Cell"
	    Dimension		    8
	    Cell		    "BooleansAsBitfields"
	    Cell		    "PassReuseOutputArgsAs"
	    Cell		    "PassReuseOutputArgsThreshold"
	    Cell		    "ZeroExternalMemoryAtStartup"
	    Cell		    "ZeroInternalMemoryAtStartup"
	    Cell		    "OptimizeModelRefInitCode"
	    Cell		    "NoFixptDivByZeroProtection"
	    Cell		    "UseSpecifiedMinMax"
	    PropName		    "DisabledProps"
	  }
	  BlockReduction	  off
	  BooleanDataType	  on
	  ConditionallyExecuteInputs on
	  InlineParams		  off
	  UseIntDivNetSlope	  off
	  UseFloatMulNetSlope	  off
	  UseSpecifiedMinMax	  off
	  InlineInvariantSignals  off
	  OptimizeBlockIOStorage  off
	  BufferReuse		  off
	  EnhancedBackFolding	  off
	  StrengthReduction	  off
	  ExpressionFolding	  off
	  BooleansAsBitfields	  off
	  BitfieldContainerType	  "uint_T"
	  EnableMemcpy		  on
	  MemcpyThreshold	  64
	  PassReuseOutputArgsAs	  "Structure reference"
	  ExpressionDepthLimit	  2147483647
	  FoldNonRolledExpr	  on
	  LocalBlockOutputs	  off
	  RollThreshold		  5
	  SystemCodeInlineAuto	  off
	  StateBitsets		  off
	  DataBitsets		  off
	  UseTempVars		  off
	  ZeroExternalMemoryAtStartup on
	  ZeroInternalMemoryAtStartup on
	  InitFltsAndDblsToZero	  on
	  NoFixptDivByZeroProtection off
	  EfficientFloat2IntCast  off
	  EfficientMapNaN2IntZero on
	  OptimizeModelRefInitCode off
	  LifeSpan		  "inf"
	  MaxStackSize		  "Inherit from target"
	  BufferReusableBoundary  on
	  SimCompilerOptimization "Off"
	  AccelVerboseBuild	  off
	  ParallelExecutionInRapidAccelerator on
	}
	Simulink.DebuggingCC {
	  $ObjectID		  5
	  Version		  "1.12.0"
	  RTPrefix		  "error"
	  ConsistencyChecking	  "none"
	  ArrayBoundsChecking	  "none"
	  SignalInfNanChecking	  "none"
	  SignalRangeChecking	  "none"
	  ReadBeforeWriteMsg	  "UseLocalSettings"
	  WriteAfterWriteMsg	  "UseLocalSettings"
	  WriteAfterReadMsg	  "UseLocalSettings"
	  AlgebraicLoopMsg	  "warning"
	  ArtificialAlgebraicLoopMsg "warning"
	  SaveWithDisabledLinksMsg "warning"
	  SaveWithParameterizedLinksMsg	"warning"
	  CheckSSInitialOutputMsg on
	  UnderspecifiedInitializationDetection	"Classic"
	  MergeDetectMultiDrivingBlocksExec "none"
	  CheckExecutionContextPreStartOutputMsg off
	  CheckExecutionContextRuntimeOutputMsg	off
	  SignalResolutionControl "TryResolveAllWithWarning"
	  BlockPriorityViolationMsg "warning"
	  MinStepSizeMsg	  "warning"
	  TimeAdjustmentMsg	  "none"
	  MaxConsecutiveZCsMsg	  "error"
	  MaskedZcDiagnostic	  "warning"
	  IgnoredZcDiagnostic	  "warning"
	  SolverPrmCheckMsg	  "warning"
	  InheritedTsInSrcMsg	  "warning"
	  DiscreteInheritContinuousMsg "warning"
	  MultiTaskDSMMsg	  "warning"
	  MultiTaskCondExecSysMsg "error"
	  MultiTaskRateTransMsg	  "error"
	  SingleTaskRateTransMsg  "none"
	  TasksWithSamePriorityMsg "warning"
	  SigSpecEnsureSampleTimeMsg "warning"
	  CheckMatrixSingularityMsg "none"
	  IntegerOverflowMsg	  "warning"
	  Int32ToFloatConvMsg	  "warning"
	  ParameterDowncastMsg	  "error"
	  ParameterOverflowMsg	  "error"
	  ParameterUnderflowMsg	  "none"
	  ParameterPrecisionLossMsg "warning"
	  ParameterTunabilityLossMsg "warning"
	  FixptConstUnderflowMsg  "none"
	  FixptConstOverflowMsg	  "none"
	  FixptConstPrecisionLossMsg "none"
	  UnderSpecifiedDataTypeMsg "none"
	  UnnecessaryDatatypeConvMsg "none"
	  VectorMatrixConversionMsg "none"
	  InvalidFcnCallConnMsg	  "error"
	  FcnCallInpInsideContextMsg "Use local settings"
	  SignalLabelMismatchMsg  "none"
	  UnconnectedInputMsg	  "warning"
	  UnconnectedOutputMsg	  "warning"
	  UnconnectedLineMsg	  "warning"
	  SFcnCompatibilityMsg	  "none"
	  FrameProcessingCompatibilityMsg "warning"
	  UniqueDataStoreMsg	  "none"
	  BusObjectLabelMismatch  "warning"
	  RootOutportRequireBusObject "warning"
	  AssertControl		  "UseLocalSettings"
	  EnableOverflowDetection off
	  ModelReferenceIOMsg	  "none"
	  ModelReferenceMultiInstanceNormalModeStructChecksumCheck "error"
	  ModelReferenceVersionMismatchMessage "none"
	  ModelReferenceIOMismatchMessage "none"
	  ModelReferenceCSMismatchMessage "none"
	  UnknownTsInhSupMsg	  "warning"
	  ModelReferenceDataLoggingMessage "warning"
	  ModelReferenceSymbolNameMessage "warning"
	  ModelReferenceExtraNoncontSigs "error"
	  StateNameClashWarn	  "warning"
	  SimStateInterfaceChecksumMismatchMsg "warning"
	  SimStateOlderReleaseMsg "error"
	  InitInArrayFormatMsg	  "warning"
	  StrictBusMsg		  "ErrorLevel1"
	  BusNameAdapt		  "WarnAndRepair"
	  NonBusSignalsTreatedAsBus "none"
	  LoggingUnavailableSignals "error"
	  BlockIODiagnostic	  "none"
	  SFUnusedDataAndEventsDiag "warning"
	  SFUnexpectedBacktrackingDiag "warning"
	  SFInvalidInputDataAccessInChartInitDiag "warning"
	  SFNoUnconditionalDefaultTransitionDiag "warning"
	  SFTransitionOutsideNaturalParentDiag "warning"
	  SFUnconditionalTransitionShadowingDiag "warning"
	}
	Simulink.HardwareCC {
	  $ObjectID		  6
	  Version		  "1.12.0"
	  ProdBitPerChar	  8
	  ProdBitPerShort	  16
	  ProdBitPerInt		  32
	  ProdBitPerLong	  32
	  ProdBitPerFloat	  32
	  ProdBitPerDouble	  64
	  ProdBitPerPointer	  32
	  ProdLargestAtomicInteger "Char"
	  ProdLargestAtomicFloat  "None"
	  ProdIntDivRoundTo	  "Zero"
	  ProdEndianess		  "LittleEndian"
	  ProdWordSize		  32
	  ProdShiftRightIntArith  on
	  ProdHWDeviceType	  "Generic->32-bit x86 compatible"
	  TargetBitPerChar	  8
	  TargetBitPerShort	  16
	  TargetBitPerInt	  32
	  TargetBitPerLong	  32
	  TargetBitPerFloat	  32
	  TargetBitPerDouble	  64
	  TargetBitPerPointer	  32
	  TargetLargestAtomicInteger "Char"
	  TargetLargestAtomicFloat "None"
	  TargetShiftRightIntArith on
	  TargetIntDivRoundTo	  "Undefined"
	  TargetEndianess	  "Unspecified"
	  TargetWordSize	  32
	  TargetTypeEmulationWarnSuppressLevel 0
	  TargetPreprocMaxBitsSint 32
	  TargetPreprocMaxBitsUint 32
	  TargetHWDeviceType	  "Specified"
	  TargetUnknown		  off
	  ProdEqTarget		  on
	}
	Simulink.ModelReferenceCC {
	  $ObjectID		  7
	  Version		  "1.12.0"
	  UpdateModelReferenceTargets "IfOutOfDateOrStructuralChange"
	  CheckModelReferenceTargetMessage "error"
	  EnableParallelModelReferenceBuilds off
	  ParallelModelReferenceErrorOnInvalidPool on
	  ParallelModelReferenceMATLABWorkerInit "None"
	  ModelReferenceNumInstancesAllowed "Multi"
	  PropagateVarSize	  "Infer from blocks in model"
	  ModelReferencePassRootInputsByReference on
	  ModelReferenceMinAlgLoopOccurrences off
	  PropagateSignalLabelsOutOfModel off
	  SupportModelReferenceSimTargetCustomCode off
	}
	Simulink.SFSimCC {
	  $ObjectID		  8
	  Version		  "1.12.0"
	  SFSimEnableDebug	  on
	  SFSimOverflowDetection  on
	  SFSimEcho		  on
	  SimBlas		  on
	  SimCtrlC		  on
	  SimExtrinsic		  on
	  SimIntegrity		  on
	  SimUseLocalCustomCode	  off
	  SimParseCustomCode	  off
	  SimBuildMode		  "sf_incremental_build"
	}
	Simulink.RTWCC {
	  $BackupClass		  "Simulink.RTWCC"
	  $ObjectID		  9
	  Version		  "1.12.0"
	  Array {
	    Type		    "Cell"
	    Dimension		    8
	    Cell		    "IncludeHyperlinkInReport"
	    Cell		    "GenerateTraceInfo"
	    Cell		    "GenerateTraceReport"
	    Cell		    "GenerateTraceReportSl"
	    Cell		    "GenerateTraceReportSf"
	    Cell		    "GenerateTraceReportEml"
	    Cell		    "GenerateSLWebview"
	    Cell		    "GenerateCodeMetricsReport"
	    PropName		    "DisabledProps"
	  }
	  SystemTargetFile	  "grt.tlc"
	  GenCodeOnly		  off
	  MakeCommand		  "make_rtw"
	  GenerateMakefile	  on
	  TemplateMakefile	  "grt_default_tmf"
	  Description		  "Generic Real-Time Target"
	  GenerateReport	  off
	  SaveLog		  off
	  RTWVerbose		  on
	  RetainRTWFile		  off
	  ProfileTLC		  off
	  TLCDebug		  off
	  TLCCoverage		  off
	  TLCAssert		  off
	  ProcessScriptMode	  "Default"
	  ConfigurationMode	  "Optimized"
	  ProcessScript		  "grt_make_rtw_hook"
	  ConfigAtBuild		  off
	  RTWUseLocalCustomCode	  off
	  RTWUseSimCustomCode	  off
	  IncludeHyperlinkInReport off
	  LaunchReport		  off
	  TargetLang		  "C"
	  IncludeBusHierarchyInRTWFileBlockHierarchyMap	off
	  IncludeERTFirstTime	  off
	  GenerateTraceInfo	  off
	  GenerateTraceReport	  off
	  GenerateTraceReportSl	  off
	  GenerateTraceReportSf	  off
	  GenerateTraceReportEml  off
	  GenerateCodeInfo	  off
	  GenerateWebview	  off
	  GenerateCodeMetricsReport off
	  GenerateCodeReplacementReport	off
	  RTWCompilerOptimization "On"
	  CheckMdlBeforeBuild	  "Off"
	  CustomRebuildMode	  "OnUpdate"
	  Array {
	    Type		    "Handle"
	    Dimension		    2
	    Simulink.CodeAppCC {
	      $ObjectID		      10
	      Version		      "1.12.0"
	      Array {
		Type			"Cell"
		Dimension		21
		Cell			"IgnoreCustomStorageClasses"
		Cell			"IgnoreTestpoints"
		Cell			"InsertBlockDesc"
		Cell			"InsertPolySpaceComments"
		Cell			"SFDataObjDesc"
		Cell			"MATLABFcnDesc"
		Cell			"SimulinkDataObjDesc"
		Cell			"DefineNamingRule"
		Cell			"SignalNamingRule"
		Cell			"ParamNamingRule"
		Cell			"InlinedPrmAccess"
		Cell			"CustomSymbolStr"
		Cell			"CustomSymbolStrGlobalVar"
		Cell			"CustomSymbolStrType"
		Cell			"CustomSymbolStrField"
		Cell			"CustomSymbolStrFcn"
		Cell			"CustomSymbolStrFcnArg"
		Cell			"CustomSymbolStrBlkIO"
		Cell			"CustomSymbolStrTmpVar"
		Cell			"CustomSymbolStrMacro"
		Cell			"ReqsInCode"
		PropName		"DisabledProps"
	      }
	      ForceParamTrailComments off
	      GenerateComments	      on
	      IgnoreCustomStorageClasses on
	      IgnoreTestpoints	      off
	      IncHierarchyInIds	      off
	      MaxIdLength	      31
	      PreserveName	      off
	      PreserveNameWithParent  off
	      ShowEliminatedStatement off
	      IncAutoGenComments      off
	      SimulinkDataObjDesc     off
	      SFDataObjDesc	      off
	      MATLABFcnDesc	      off
	      IncDataTypeInIds	      off
	      MangleLength	      1
	      CustomSymbolStrGlobalVar "$R$N$M"
	      CustomSymbolStrType     "$N$R$M"
	      CustomSymbolStrField    "$N$M"
	      CustomSymbolStrFcn      "$R$N$M$F"
	      CustomSymbolStrFcnArg   "rt$I$N$M"
	      CustomSymbolStrBlkIO    "rtb_$N$M"
	      CustomSymbolStrTmpVar   "$N$M"
	      CustomSymbolStrMacro    "$R$N$M"
	      DefineNamingRule	      "None"
	      ParamNamingRule	      "None"
	      SignalNamingRule	      "None"
	      InsertBlockDesc	      off
	      InsertPolySpaceComments off
	      SimulinkBlockComments   on
	      MATLABSourceComments    off
	      EnableCustomComments    off
	      InlinedPrmAccess	      "Literals"
	      ReqsInCode	      off
	      UseSimReservedNames     off
	    }
	    Simulink.GRTTargetCC {
	      $BackupClass	      "Simulink.TargetCC"
	      $ObjectID		      11
	      Version		      "1.12.0"
	      Array {
		Type			"Cell"
		Dimension		16
		Cell			"GeneratePreprocessorConditionals"
		Cell			"IncludeMdlTerminateFcn"
		Cell			"CombineOutputUpdateFcns"
		Cell			"SuppressErrorStatus"
		Cell			"ERTCustomFileBanners"
		Cell			"GenerateSampleERTMain"
		Cell			"GenerateTestInterfaces"
		Cell			"ModelStepFunctionPrototypeControlCompliant"
		Cell			"CPPClassGenCompliant"
		Cell			"MultiInstanceERTCode"
		Cell			"PurelyIntegerCode"
		Cell			"SupportComplex"
		Cell			"SupportAbsoluteTime"
		Cell			"SupportContinuousTime"
		Cell			"SupportNonInlinedSFcns"
		Cell			"PortableWordSizes"
		PropName		"DisabledProps"
	      }
	      TargetFcnLib	      "ansi_tfl_table_tmw.mat"
	      TargetLibSuffix	      ""
	      TargetPreCompLibLocation ""
	      CodeReplacementLibrary  "ANSI_C"
	      UtilityFuncGeneration   "Auto"
	      ERTMultiwordTypeDef     "System defined"
	      CodeExecutionProfiling  off
	      ERTMultiwordLength      256
	      MultiwordLength	      2048
	      GenerateFullHeader      on
	      GenerateSampleERTMain   off
	      GenerateTestInterfaces  off
	      IsPILTarget	      off
	      ModelReferenceCompliant on
	      ParMdlRefBuildCompliant on
	      CompOptLevelCompliant   on
	      ConcurrentExecutionCompliant on
	      IncludeMdlTerminateFcn  on
	      GeneratePreprocessorConditionals "Disable all"
	      CombineOutputUpdateFcns off
	      CombineSignalStateStructs	off
	      SuppressErrorStatus     off
	      ERTFirstTimeCompliant   off
	      IncludeFileDelimiter    "Auto"
	      ERTCustomFileBanners    off
	      SupportAbsoluteTime     on
	      LogVarNameModifier      "rt_"
	      MatFileLogging	      on
	      MultiInstanceERTCode    off
	      SupportNonFinite	      on
	      SupportComplex	      on
	      PurelyIntegerCode	      off
	      SupportContinuousTime   on
	      SupportNonInlinedSFcns  on
	      SupportVariableSizeSignals off
	      EnableShiftOperators    on
	      ParenthesesLevel	      "Nominal"
	      PortableWordSizes	      off
	      ModelStepFunctionPrototypeControlCompliant off
	      CPPClassGenCompliant    off
	      AutosarCompliant	      off
	      GRTInterface	      on
	      UseMalloc		      off
	      ExtMode		      off
	      ExtModeStaticAlloc      off
	      ExtModeTesting	      off
	      ExtModeStaticAllocSize  1000000
	      ExtModeTransport	      0
	      ExtModeMexFile	      "ext_comm"
	      ExtModeIntrfLevel	      "Level1"
	      RTWCAPISignals	      off
	      RTWCAPIParams	      off
	      RTWCAPIStates	      off
	      RTWCAPIRootIO	      off
	      GenerateASAP2	      off
	    }
	    PropName		    "Components"
	  }
	}
	PropName		"Components"
      }
      Name		      "Configuration"
      CurrentDlgPage	      "Simulation Target/Custom Code"
      ConfigPrmDlgPosition     [ 198, 91, 1083, 849 ] 
    }
    PropName		    "ConfigurationSets"
  }
  Simulink.ConfigSet {
    $PropName		    "ActiveConfigurationSet"
    $ObjectID		    1
  }
  ExplicitPartitioning	  off
  BlockDefaults {
    ForegroundColor	    "black"
    BackgroundColor	    "white"
    DropShadow		    off
    NamePlacement	    "normal"
    FontName		    "Arial"
    FontSize		    10
    FontWeight		    "normal"
    FontAngle		    "normal"
    ShowName		    on
    BlockRotation	    0
    BlockMirror		    off
  }
  AnnotationDefaults {
    HorizontalAlignment	    "center"
    VerticalAlignment	    "middle"
    ForegroundColor	    "black"
    BackgroundColor	    "white"
    DropShadow		    off
    FontName		    "Arial"
    FontSize		    10
    FontWeight		    "normal"
    FontAngle		    "normal"
    UseDisplayTextAsClickCallback off
  }
  LineDefaults {
    FontName		    "Arial"
    FontSize		    9
    FontWeight		    "normal"
    FontAngle		    "normal"
  }
  BlockParameterDefaults {
    Block {
      BlockType		      Constant
      Value		      "1"
      VectorParams1D	      on
      SamplingMode	      "Sample based"
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: Inherit from 'Constant value'"
      LockScale		      off
      SampleTime	      "inf"
      FramePeriod	      "inf"
      PreserveConstantTs      off
    }
    Block {
      BlockType		      DataTypeConversion
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: Inherit via back propagation"
      LockScale		      off
      ConvertRealWorld	      "Real World Value (RWV)"
      RndMeth		      "Zero"
      SaturateOnIntegerOverflow	on
      SampleTime	      "-1"
    }
    Block {
      BlockType		      Demux
      Outputs		      "4"
      DisplayOption	      "none"
      BusSelectionMode	      off
    }
    Block {
      BlockType		      DiscretePulseGenerator
      PulseType		      "Sample based"
      TimeSource	      "Use simulation time"
      Amplitude		      "1"
      Period		      "2"
      PulseWidth	      "1"
      PhaseDelay	      "0"
      SampleTime	      "1"
      VectorParams1D	      on
    }
    Block {
      BlockType		      DiscreteStateSpace
      A			      "1"
      B			      "1"
      C			      "1"
      D			      "1"
      X0		      "0"
      SampleTime	      "1"
      StateMustResolveToSignalObject off
      RTWStateStorageClass    "Auto"
      Realization	      "auto"
    }
    Block {
      BlockType		      FromWorkspace
      VariableName	      "simulink_input"
      OutDataTypeStr	      "Inherit: auto"
      SampleTime	      "-1"
      Interpolate	      on
      ZeroCross		      off
      OutputAfterFinalValue   "Extrapolation"
    }
    Block {
      BlockType		      InitialCondition
      Value		      "1"
      SampleTime	      "-1"
    }
    Block {
      BlockType		      Inport
      Port		      "1"
      OutputFunctionCall      off
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: auto"
      LockScale		      off
      BusOutputAsStruct	      off
      PortDimensions	      "-1"
      VarSizeSig	      "Inherit"
      SampleTime	      "-1"
      SignalType	      "auto"
      SamplingMode	      "auto"
      LatchByDelayingOutsideSignal off
      LatchInputForFeedbackSignals off
      Interpolate	      on
    }
    Block {
      BlockType		      Outport
      Port		      "1"
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: auto"
      LockScale		      off
      BusOutputAsStruct	      off
      PortDimensions	      "-1"
      VarSizeSig	      "Inherit"
      SampleTime	      "-1"
      SignalType	      "auto"
      SamplingMode	      "auto"
      SourceOfInitialOutputValue "Dialog"
      OutputWhenDisabled      "held"
      InitialOutput	      "[]"
    }
    Block {
      BlockType		      Product
      Inputs		      "2"
      Multiplication	      "Element-wise(.*)"
      CollapseMode	      "All dimensions"
      CollapseDim	      "1"
      InputSameDT	      on
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: Same as first input"
      LockScale		      off
      RndMeth		      "Zero"
      SaturateOnIntegerOverflow	on
      SampleTime	      "-1"
    }
    Block {
      BlockType		      RateTransition
      Integrity		      on
      Deterministic	      on
      X0		      "0"
      OutPortSampleTimeOpt    "Specify"
      OutPortSampleTimeMultiple	"1"
      OutPortSampleTime	      "-1"
    }
    Block {
      BlockType		      S-Function
      FunctionName	      "system"
      SFunctionModules	      "''"
      PortCounts	      "[]"
      SFunctionDeploymentMode off
    }
    Block {
      BlockType		      SubSystem
      ShowPortLabels	      "FromPortIcon"
      Permissions	      "ReadWrite"
      PermitHierarchicalResolution "All"
      TreatAsAtomicUnit	      off
      CheckFcnCallInpInsideContextMsg off
      SystemSampleTime	      "-1"
      RTWFcnNameOpts	      "Auto"
      RTWFileNameOpts	      "Auto"
      RTWMemSecFuncInitTerm   "Inherit from model"
      RTWMemSecFuncExecute    "Inherit from model"
      RTWMemSecDataConstants  "Inherit from model"
      RTWMemSecDataInternal   "Inherit from model"
      RTWMemSecDataParameters "Inherit from model"
      SimViewingDevice	      off
      DataTypeOverride	      "UseLocalSettings"
      DataTypeOverrideAppliesTo	"AllNumericTypes"
      MinMaxOverflowLogging   "UseLocalSettings"
      SFBlockType	      "NONE"
      Variant		      off
      GeneratePreprocessorConditionals off
    }
    Block {
      BlockType		      Sum
      IconShape		      "rectangular"
      Inputs		      "++"
      CollapseMode	      "All dimensions"
      CollapseDim	      "1"
      InputSameDT	      on
      AccumDataTypeStr	      "Inherit: Inherit via internal rule"
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: Same as first input"
      LockScale		      off
      RndMeth		      "Floor"
      SaturateOnIntegerOverflow	on
      SampleTime	      "-1"
    }
    Block {
      BlockType		      Terminator
    }
    Block {
      BlockType		      ToWorkspace
      VariableName	      "simulink_output"
      MaxDataPoints	      "1000"
      Decimation	      "1"
      SampleTime	      "0"
      SaveFormat	      "Array"
      FixptAsFi		      off
      NumInputs		      "1"
    }
    Block {
      BlockType		      TriggerPort
      TriggerType	      "rising"
      StatesWhenEnabling      "inherit"
      PropagateVarSize	      "During execution"
      ShowOutputPort	      off
      OutputDataType	      "auto"
      SampleTimeType	      "triggered"
      SampleTime	      "1"
      ZeroCross		      on
      PortDimensions	      "-1"
      TriggerSignalSampleTime "-1"
      OutMin		      "[]"
      OutMax		      "[]"
      OutDataTypeStr	      "Inherit: auto"
      Interpolate	      on
    }
    Block {
      BlockType		      UnitDelay
      X0		      "0"
      InputProcessing	      "Inherited"
      SampleTime	      "1"
      StateMustResolveToSignalObject off
      RTWStateStorageClass    "Auto"
      HasFrameUpgradeWarning  on
    }
  }
  System {
    Name		    "SimulinkModel_Template"
    Location		    [155, 168, 1183, 569]
    Open		    on
    ModelBrowserVisibility  off
    ModelBrowserWidth	    200
    ScreenColor		    "white"
    PaperOrientation	    "landscape"
    PaperPositionMode	    "auto"
    PaperType		    "usletter"
    PaperUnits		    "inches"
    TiledPaperMargins	    [0.500000, 0.500000, 0.500000, 0.500000]
    TiledPageScale	    1
    ShowPageBoundaries	    off
    ZoomFactor		    "100"
    ReportName		    "simulink-default.rpt"
    SIDHighWatermark	    "1939"
    Block {
      BlockType		      DiscretePulseGenerator
      Name		      "CR Acceleration\nTiming"
      SID		      "1218"
      Ports		      [0, 1]
      Position		      [695, 129, 725, 161]
      BackgroundColor	      "red"
      Period		      "Integrator.Interpolations"
      PhaseDelay	      "Integrator.Interpolations-1"
      SampleTime	      "sample"
    }
    Block {
      BlockType		      SubSystem
      Name		      "Calc Accel Vector"
      SID		      "1130"
      Ports		      [3, 1, 0, 1]
      Position		      [680, 191, 820, 269]
      BackgroundColor	      "orange"
      MinAlgLoopOccurrences   off
      PropExecContextOutsideSubsystem off
      RTWSystemCode	      "Auto"
      FunctionWithSeparateData off
      Opaque		      off
      RequestExecContextInheritance off
      MaskHideContents	      off
      System {
	Name			"Calc Accel Vector"
	Location		[225, 546, 1196, 895]
	Open			off
	ModelBrowserVisibility	off
	ModelBrowserWidth	200
	ScreenColor		"white"
	PaperOrientation	"landscape"
	PaperPositionMode	"auto"
	PaperType		"usletter"
	PaperUnits		"inches"
	TiledPaperMargins	[0.500000, 0.500000, 0.500000, 0.500000]
	TiledPageScale		1
	ShowPageBoundaries	off
	ZoomFactor		"100"
	Block {
	  BlockType		  Inport
	  Name			  "C*vel"
	  SID			  "1241"
	  Position		  [195, 163, 225, 177]
	  BackgroundColor	  "orange"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "TotalRF"
	  SID			  "1240"
	  Position		  [195, 193, 225, 207]
	  BackgroundColor	  "orange"
	  Port			  "2"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "ExprRF"
	  SID			  "1376"
	  Position		  [195, 288, 225, 302]
	  BackgroundColor	  "orange"
	  Port			  "3"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  TriggerPort
	  Name			  "Trigger"
	  SID			  "1217"
	  Ports			  []
	  Position		  [372, 15, 392, 35]
	  BackgroundColor	  "red"
	  StatesWhenEnabling	  "held"
	}
	Block {
	  BlockType		  Sum
	  Name			  "Algebra"
	  SID			  "1242"
	  Ports			  [5, 1]
	  Position		  [400, 150, 440, 210]
	  BackgroundColor	  "orange"
	  Inputs		  "+--+-"
	  InputSameDT		  off
	  OutDataTypeStr	  "Inherit: Inherit via internal rule"
	  SaturateOnIntegerOverflow off
	}
	Block {
	  BlockType		  FromWorkspace
	  Name			  "EQ Record"
	  SID			  "1700"
	  Position		  [40, 127, 170, 153]
	  BackgroundColor	  "orange"
	  VariableName		  "Integrator.PEFFsimulink"
	  Interpolate		  off
	  ZeroCross		  on
	  OutputAfterFinalValue	  "Holding final value"
	}
	Block {
	  BlockType		  Constant
	  Name			  "EQ Scale Factor"
	  SID			  "1244"
	  Position		  [40, 74, 170, 106]
	  BackgroundColor	  "orange"
	  Value			  "Integrator.EQScaleFactor"
	}
	Block {
	  BlockType		  DiscreteStateSpace
	  Name			  "Minv*()"
	  SID			  "1245"
	  Position		  [480, 161, 590, 199]
	  BackgroundColor	  "orange"
	  A			  "[]"
	  B			  "[]"
	  C			  "[]"
	  D			  "Structure.MassMatrixFreeInv"
	  SampleTime		  "-1"
	}
	Block {
	  BlockType		  Constant
	  Name			  "P0"
	  SID			  "1246"
	  Position		  [40, 234, 170, 266]
	  BackgroundColor	  "orange"
	  Value			  "Structure.P0"
	}
	Block {
	  BlockType		  Product
	  Name			  "Product"
	  SID			  "1247"
	  Ports			  [2, 1]
	  Position		  [290, 117, 320, 148]
	  BackgroundColor	  "orange"
	  InputSameDT		  off
	  OutDataTypeStr	  "Inherit: Inherit via internal rule"
	  SaturateOnIntegerOverflow off
	}
	Block {
	  BlockType		  Outport
	  Name			  "Target Acceleration"
	  SID			  "1249"
	  Position		  [655, 173, 685, 187]
	  BackgroundColor	  "orange"
	  IconDisplay		  "Port number"
	}
	Line {
	  SrcBlock		  "TotalRF"
	  SrcPort		  1
	  Points		  [125, 0; 0, -20]
	  DstBlock		  "Algebra"
	  DstPort		  3
	}
	Line {
	  SrcBlock		  "P0"
	  SrcPort		  1
	  Points		  [190, 0; 0, -60]
	  DstBlock		  "Algebra"
	  DstPort		  4
	}
	Line {
	  SrcBlock		  "Algebra"
	  SrcPort		  1
	  DstBlock		  "Minv*()"
	  DstPort		  1
	}
	Line {
	  SrcBlock		  "Product"
	  SrcPort		  1
	  Points		  [30, 0; 0, 25]
	  DstBlock		  "Algebra"
	  DstPort		  1
	}
	Line {
	  SrcBlock		  "EQ Scale Factor"
	  SrcPort		  1
	  Points		  [85, 0; 0, 35]
	  DstBlock		  "Product"
	  DstPort		  1
	}
	Line {
	  SrcBlock		  "EQ Record"
	  SrcPort		  1
	  DstBlock		  "Product"
	  DstPort		  2
	}
	Line {
	  SrcBlock		  "C*vel"
	  SrcPort		  1
	  DstBlock		  "Algebra"
	  DstPort		  2
	}
	Line {
	  SrcBlock		  "Minv*()"
	  SrcPort		  1
	  DstBlock		  "Target Acceleration"
	  DstPort		  1
	}
	Line {
	  SrcBlock		  "ExprRF"
	  SrcPort		  1
	  Points		  [155, 0]
	  DstBlock		  "Algebra"
	  DstPort		  5
	}
	Annotation {
	  SID			  "1936"
	  Position		  [199, 148]
	  BackgroundColor	  "orange"
	}
      }
    }
    Block {
      BlockType		      SubSystem
      Name		      "Calculate Command Vectors"
      SID		      "49"
      Ports		      [1, 5]
      Position		      [60, 142, 210, 238]
      BackgroundColor	      "cyan"
      TreatAsAtomicUnit	      on
      MinAlgLoopOccurrences   off
      PropExecContextOutsideSubsystem off
      SystemSampleTime	      "SampleRate"
      RTWSystemCode	      "Auto"
      FunctionWithSeparateData off
      Opaque		      off
      RequestExecContextInheritance off
      MaskHideContents	      off
      System {
	Name			"Calculate Command Vectors"
	Location		[2, 94, 1023, 476]
	Open			off
	ModelBrowserVisibility	off
	ModelBrowserWidth	200
	ScreenColor		"white"
	PaperOrientation	"landscape"
	PaperPositionMode	"auto"
	PaperType		"usletter"
	PaperUnits		"inches"
	TiledPaperMargins	[0.500000, 0.500000, 0.500000, 0.500000]
	TiledPageScale		1
	ShowPageBoundaries	off
	ZoomFactor		"100"
	Block {
	  BlockType		  Inport
	  Name			  "Accel"
	  SID			  "1413"
	  Position		  [40, 143, 70, 157]
	  BackgroundColor	  "cyan"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  SubSystem
	  Name			  "Calc Disp and Velocity Vectors \nIncrement Step"
	  SID			  "1676"
	  Ports			  [1, 5]
	  Position		  [115, 103, 295, 197]
	  BackgroundColor	  "cyan"
	  MinAlgLoopOccurrences	  off
	  PropExecContextOutsideSubsystem off
	  RTWSystemCode		  "Auto"
	  FunctionWithSeparateData off
	  Opaque		  off
	  RequestExecContextInheritance	off
	  MaskHideContents	  off
	  System {
	    Name		    "Calc Disp and Velocity Vectors \nIncrement Step"
	    Location		    [71, 365, 1089, 1012]
	    Open		    off
	    ModelBrowserVisibility  off
	    ModelBrowserWidth	    200
	    ScreenColor		    "white"
	    PaperOrientation	    "landscape"
	    PaperPositionMode	    "auto"
	    PaperType		    "usletter"
	    PaperUnits		    "inches"
	    TiledPaperMargins	    [0.500000, 0.500000, 0.500000, 0.500000]
	    TiledPageScale	    1
	    ShowPageBoundaries	    off
	    ZoomFactor		    "100"
	    Block {
	      BlockType		      Inport
	      Name		      "Accel"
	      SID		      "1677"
	      Position		      [20, 473, 50, 487]
	      BackgroundColor	      "orange"
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Sum
	      Name		      "Add"
	      SID		      "1678"
	      Ports		      [3, 1]
	      Position		      [700, 389, 730, 421]
	      BackgroundColor	      "orange"
	      Inputs		      "+++"
	      InputSameDT	      off
	      OutDataTypeStr	      "Inherit: Inherit via internal rule"
	      SaturateOnIntegerOverflow	off
	    }
	    Block {
	      BlockType		      Sum
	      Name		      "Add1"
	      SID		      "1679"
	      Ports		      [2, 1]
	      Position		      [460, 81, 490, 114]
	      BackgroundColor	      "lightBlue"
	      InputSameDT	      off
	      OutDataTypeStr	      "Inherit: Inherit via internal rule"
	      SaturateOnIntegerOverflow	off
	    }
	    Block {
	      BlockType		      InitialCondition
	      Name		      "Init Accel"
	      SID		      "1932"
	      Position		      [70, 466, 110, 494]
	      BackgroundColor	      "orange"
	      FontSize		      12
	      Value		      "Integrator.Acceleration"
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product"
	      SID		      "1680"
	      Ports		      [2, 1]
	      Position		      [600, 362, 630, 393]
	      BackgroundColor	      "orange"
	      InputSameDT	      off
	      OutDataTypeStr	      "Inherit: Inherit via internal rule"
	      SaturateOnIntegerOverflow	off
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product1"
	      SID		      "1681"
	      Ports		      [2, 1]
	      Position		      [510, 442, 540, 473]
	      BackgroundColor	      "orange"
	      InputSameDT	      off
	      OutDataTypeStr	      "Inherit: Inherit via internal rule"
	      SaturateOnIntegerOverflow	off
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product2"
	      SID		      "1682"
	      Ports		      [2, 1]
	      Position		      [255, 162, 285, 193]
	      BackgroundColor	      "lightBlue"
	      InputSameDT	      off
	      OutDataTypeStr	      "Inherit: Inherit via internal rule"
	      SaturateOnIntegerOverflow	off
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product3"
	      SID		      "1683"
	      Ports		      [2, 1]
	      Position		      [600, 437, 630, 468]
	      ZOrder		      -13
	      BackgroundColor	      "orange"
	      Multiplication	      "Matrix(*)"
	      InputSameDT	      off
	      OutDataTypeStr	      "Inherit: Inherit via internal rule"
	      SaturateOnIntegerOverflow	off
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product4"
	      SID		      "1684"
	      Ports		      [2, 1]
	      Position		      [385, 157, 415, 188]
	      ZOrder		      -13
	      BackgroundColor	      "lightBlue"
	      Multiplication	      "Matrix(*)"
	      InputSameDT	      off
	      OutDataTypeStr	      "Inherit: Inherit via internal rule"
	      SaturateOnIntegerOverflow	off
	    }
	    Block {
	      BlockType		      Product
	      Name		      "Product5"
	      SID		      "1685"
	      Ports		      [2, 1]
	      Position		      [775, 157, 805, 188]
	      ZOrder		      -13
	      BackgroundColor	      "lightBlue"
	      Multiplication	      "Matrix(*)"
	      InputSameDT	      off
	      OutDataTypeStr	      "Inherit: Inherit via internal rule"
	      SaturateOnIntegerOverflow	off
	    }
	    Block {
	      BlockType		      Constant
	      Name		      "Timestep"
	      SID		      "1686"
	      Position		      [480, 370, 575, 400]
	      BackgroundColor	      "orange"
	      Value		      "Integrator.Timestep"
	    }
	    Block {
	      BlockType		      Constant
	      Name		      "Timestep "
	      SID		      "1687"
	      Position		      [115, 155, 210, 185]
	      BackgroundColor	      "lightBlue"
	      Value		      "Integrator.Timestep"
	    }
	    Block {
	      BlockType		      Constant
	      Name		      "Timestep ^1"
	      SID		      "1688"
	      Position		      [355, 506, 495, 534]
	      BackgroundColor	      "orange"
	      Value		      "Integrator.Alpha2"
	    }
	    Block {
	      BlockType		      Constant
	      Name		      "Timestep ^2"
	      SID		      "1689"
	      Position		      [325, 436, 465, 464]
	      BackgroundColor	      "orange"
	      Value		      "Integrator.TimestepSquared"
	    }
	    Block {
	      BlockType		      Constant
	      Name		      "Timestep ^3"
	      SID		      "1690"
	      Position		      [200, 236, 340, 264]
	      BackgroundColor	      "lightBlue"
	      Value		      "Integrator.Alpha1"
	    }
	    Block {
	      BlockType		      Constant
	      Name		      "Timestep ^4"
	      SID		      "1691"
	      Position		      [600, 236, 740, 264]
	      BackgroundColor	      "lightBlue"
	      Value		      "Structure.DampingMatrixFree"
	    }
	    Block {
	      BlockType		      UnitDelay
	      Name		      "Unit Delay1"
	      SID		      "1692"
	      Position		      [535, 92, 575, 108]
	      BackgroundColor	      "green"
	      InputProcessing	      "Elements as channels (sample based)"
	      SampleTime	      "-1"
	    }
	    Block {
	      BlockType		      UnitDelay
	      Name		      "Unit Delay2"
	      SID		      "1693"
	      Position		      [775, 397, 815, 413]
	      BackgroundColor	      "green"
	      InputProcessing	      "Elements as channels (sample based)"
	      SampleTime	      "-1"
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "Target Displacement"
	      SID		      "1694"
	      Position		      [820, 348, 850, 362]
	      BackgroundColor	      "orange"
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "Previous Step Target Disp"
	      SID		      "1695"
	      Position		      [890, 398, 920, 412]
	      BackgroundColor	      "orange"
	      Port		      "2"
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "Target Velocity"
	      SID		      "1696"
	      Position		      [670, 53, 700, 67]
	      BackgroundColor	      "lightBlue"
	      Port		      "3"
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "C*vel for Accel"
	      SID		      "1697"
	      Position		      [870, 168, 900, 182]
	      BackgroundColor	      "lightBlue"
	      Port		      "4"
	      IconDisplay	      "Port number"
	    }
	    Block {
	      BlockType		      Outport
	      Name		      "Previous Velocity"
	      SID		      "1698"
	      Position		      [670, 93, 700, 107]
	      BackgroundColor	      "lightBlue"
	      Port		      "5"
	      IconDisplay	      "Port number"
	    }
	    Line {
	      SrcBlock		      "Add"
	      SrcPort		      1
	      Points		      [10, 0]
	      Branch {
		DstBlock		"Unit Delay2"
		DstPort			1
	      }
	      Branch {
		Points			[0, -50]
		DstBlock		"Target Displacement"
		DstPort			1
	      }
	    }
	    Line {
	      SrcBlock		      "Product1"
	      SrcPort		      1
	      DstBlock		      "Product3"
	      DstPort		      2
	    }
	    Line {
	      SrcBlock		      "Accel"
	      SrcPort		      1
	      DstBlock		      "Init Accel"
	      DstPort		      1
	    }
	    Line {
	      SrcBlock		      "Timestep ^2"
	      SrcPort		      1
	      DstBlock		      "Product1"
	      DstPort		      1
	    }
	    Line {
	      SrcBlock		      "Add1"
	      SrcPort		      1
	      Points		      [20, 0]
	      Branch {
		DstBlock		"Unit Delay1"
		DstPort			1
	      }
	      Branch {
		Points			[0, -40]
		DstBlock		"Target Velocity"
		DstPort			1
	      }
	      Branch {
		Points			[0, 80]
		DstBlock		"Product5"
		DstPort			2
	      }
	    }
	    Line {
	      SrcBlock		      "Timestep "
	      SrcPort		      1
	      DstBlock		      "Product2"
	      DstPort		      1
	    }
	    Line {
	      SrcBlock		      "Product2"
	      SrcPort		      1
	      DstBlock		      "Product4"
	      DstPort		      2
	    }
	    Line {
	      SrcBlock		      "Timestep"
	      SrcPort		      1
	      DstBlock		      "Product"
	      DstPort		      2
	    }
	    Line {
	      SrcBlock		      "Product"
	      SrcPort		      1
	      Points		      [25, 0; 0, 15]
	      DstBlock		      "Add"
	      DstPort		      1
	    }
	    Line {
	      SrcBlock		      "Product3"
	      SrcPort		      1
	      Points		      [45, 0; 0, -50]
	      DstBlock		      "Add"
	      DstPort		      2
	    }
	    Line {
	      SrcBlock		      "Unit Delay2"
	      SrcPort		      1
	      Points		      [20, 0]
	      Branch {
		Points			[0, 30; -155, 0]
		DstBlock		"Add"
		DstPort			3
	      }
	      Branch {
		DstBlock		"Previous Step Target Disp"
		DstPort			1
	      }
	    }
	    Line {
	      SrcBlock		      "Unit Delay1"
	      SrcPort		      1
	      Points		      [5, 0]
	      Branch {
		Points			[0, -70; -140, 0]
		DstBlock		"Add1"
		DstPort			1
	      }
	      Branch {
		DstBlock		"Product"
		DstPort			1
	      }
	      Branch {
		DstBlock		"Previous Velocity"
		DstPort			1
	      }
	    }
	    Line {
	      SrcBlock		      "Timestep ^1"
	      SrcPort		      1
	      Points		      [80, 0; 0, -75]
	      DstBlock		      "Product3"
	      DstPort		      1
	    }
	    Line {
	      SrcBlock		      "Product4"
	      SrcPort		      1
	      Points		      [25, 0]
	      DstBlock		      "Add1"
	      DstPort		      2
	    }
	    Line {
	      SrcBlock		      "Timestep ^3"
	      SrcPort		      1
	      Points		      [10, 0; 0, -85]
	      DstBlock		      "Product4"
	      DstPort		      1
	    }
	    Line {
	      SrcBlock		      "Product5"
	      SrcPort		      1
	      DstBlock		      "C*vel for Accel"
	      DstPort		      1
	    }
	    Line {
	      SrcBlock		      "Timestep ^4"
	      SrcPort		      1
	      Points		      [15, 0]
	      DstBlock		      "Product5"
	      DstPort		      1
	    }
	    Line {
	      SrcBlock		      "Init Accel"
	      SrcPort		      1
	      Points		      [5, 0]
	      Branch {
		Points			[360, 0; 0, -15]
		DstBlock		"Product1"
		DstPort			2
	      }
	      Branch {
		Points			[0, -265; 105, 0; 0, -30]
		DstBlock		"Product2"
		DstPort			2
	      }
	    }
	    Annotation {
	      SID		      "1937"
	      Name		      "Velocity Vector"
	      Position		      [302, 123]
	      FontSize		      16
	      FontWeight	      "bold"
	    }
	    Annotation {
	      SID		      "1938"
	      Name		      "Displacement Vector"
	      Position		      [317, 388]
	      FontSize		      16
	      FontWeight	      "bold"
	    }
	    Annotation {
	      SID		      "1939"
	      Position		      [92, 489]
	    }
	  }
	}
	Block {
	  BlockType		  Reference
	  Name			  "Counter\nFree-Running"
	  SID			  "1924"
	  Ports			  [0, 1]
	  Position		  [115, 315, 145, 345]
	  ZOrder		  -6
	  BackgroundColor	  "cyan"
	  LibraryVersion	  "1.260"
	  SourceBlock		  "simulink/Sources/Counter\nFree-Running"
	  SourceType		  "Counter Free-Running"
	  NumBits		  "16"
	  tsamp			  "-1"
	}
	Block {
	  BlockType		  DataTypeConversion
	  Name			  "Data Type Conversion"
	  SID			  "1925"
	  Position		  [175, 313, 250, 347]
	  ZOrder		  -5
	  BackgroundColor	  "cyan"
	  RndMeth		  "Floor"
	  SaturateOnIntegerOverflow off
	}
	Block {
	  BlockType		  Reference
	  Name			  "Increment\nReal World"
	  SID			  "1926"
	  Ports			  [1, 1]
	  Position		  [280, 315, 310, 345]
	  ZOrder		  -5
	  BackgroundColor	  "cyan"
	  LibraryVersion	  "1.260"
	  SourceBlock		  "simulink/Additional Math\n& Discrete/Additional Math:\nIncrement - Decrement/Increment\nReal World"
	  SourceType		  "Real World Value Increment"
	}
	Block {
	  BlockType		  Outport
	  Name			  "Target Displacement"
	  SID			  "138"
	  Position		  [415, 103, 445, 117]
	  BackgroundColor	  "cyan"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Outport
	  Name			  "Target Velocity"
	  SID			  "140"
	  Position		  [415, 143, 445, 157]
	  BackgroundColor	  "cyan"
	  Port			  "2"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Outport
	  Name			  "C*vel"
	  SID			  "1078"
	  Position		  [485, 163, 515, 177]
	  BackgroundColor	  "cyan"
	  Port			  "3"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Outport
	  Name			  "Previous Velocity"
	  SID			  "1177"
	  Position		  [530, 183, 560, 197]
	  BackgroundColor	  "cyan"
	  Port			  "4"
	  IconDisplay		  "Port number"
	  InitialOutput		  "Integrator.RestoringForce"
	}
	Block {
	  BlockType		  Outport
	  Name			  "Step"
	  SID			  "1927"
	  Position		  [345, 323, 375, 337]
	  BackgroundColor	  "cyan"
	  Port			  "5"
	  IconDisplay		  "Port number"
	  InitialOutput		  "Integrator.RestoringForce"
	}
	Line {
	  SrcBlock		  "Calc Disp and Velocity Vectors \nIncrement Step"
	  SrcPort		  1
	  DstBlock		  "Target Displacement"
	  DstPort		  1
	}
	Line {
	  SrcBlock		  "Calc Disp and Velocity Vectors \nIncrement Step"
	  SrcPort		  3
	  DstBlock		  "Target Velocity"
	  DstPort		  1
	}
	Line {
	  SrcBlock		  "Calc Disp and Velocity Vectors \nIncrement Step"
	  SrcPort		  4
	  DstBlock		  "C*vel"
	  DstPort		  1
	}
	Line {
	  SrcBlock		  "Accel"
	  SrcPort		  1
	  DstBlock		  "Calc Disp and Velocity Vectors \nIncrement Step"
	  DstPort		  1
	}
	Line {
	  SrcBlock		  "Counter\nFree-Running"
	  SrcPort		  1
	  DstBlock		  "Data Type Conversion"
	  DstPort		  1
	}
	Line {
	  SrcBlock		  "Data Type Conversion"
	  SrcPort		  1
	  DstBlock		  "Increment\nReal World"
	  DstPort		  1
	}
	Line {
	  SrcBlock		  "Increment\nReal World"
	  SrcPort		  1
	  DstBlock		  "Step"
	  DstPort		  1
	}
	Line {
	  SrcBlock		  "Calc Disp and Velocity Vectors \nIncrement Step"
	  SrcPort		  5
	  DstBlock		  "Previous Velocity"
	  DstPort		  1
	}
      }
    }
    Block {
      BlockType		      SubSystem
      Name		      "Numerical Element Calculations"
      SID		      "1251"
      Ports		      [2, 1]
      Position		      [390, 208, 545, 252]
      BackgroundColor	      "lightBlue"
      LibraryVersion	      "1.32"
      ErrorFcn		      "Stateflow.Translate.translate"
      PermitHierarchicalResolution "ExplicitOnly"
      TreatAsAtomicUnit	      on
      MinAlgLoopOccurrences   off
      PropExecContextOutsideSubsystem off
      RTWSystemCode	      "Auto"
      FunctionWithSeparateData off
      Opaque		      off
      RequestExecContextInheritance off
      MaskHideContents	      off
      SFBlockType	      "MATLAB Function"
      MaskType		      "Stateflow"
      MaskDescription	      "Embedded MATLAB block"
      MaskSelfModifiable      on
      MaskDisplay	      "bgColor = Simulink.Root.ColorString2Rgb(get_param(gcbh, 'BackgroundColor')); image(imread('pr"
      "ivate/eml_membrane_16.png','png','BackgroundColor',bgColor(1:3)),'center'); disp([10 10 'eml']);"
      MaskIconFrame	      on
      MaskIconOpaque	      off
      MaskIconRotate	      "none"
      MaskPortRotate	      "default"
      MaskIconUnits	      "normalized"
      System {
	Name			"Numerical Element Calculations"
	Location		[257, 457, 812, 717]
	Open			off
	ModelBrowserVisibility	off
	ModelBrowserWidth	200
	ScreenColor		"white"
	PaperOrientation	"landscape"
	PaperPositionMode	"auto"
	PaperType		"usletter"
	PaperUnits		"inches"
	TiledPaperMargins	[0.500000, 0.500000, 0.500000, 0.500000]
	TiledPageScale		1
	ShowPageBoundaries	off
	ZoomFactor		"100"
	SIDHighWatermark	"52"
	Block {
	  BlockType		  Inport
	  Name			  "Displacement"
	  SID			  "1251::19"
	  Position		  [20, 101, 40, 119]
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Inport
	  Name			  "Velocity"
	  SID			  "1251::34"
	  Position		  [20, 136, 40, 154]
	  Port			  "2"
	  IconDisplay		  "Port number"
	}
	Block {
	  BlockType		  Demux
	  Name			  " Demux "
	  SID			  "1251::50"
	  Ports			  [1, 1]
	  Position		  [270, 160, 320, 200]
	  ZOrder		  6
	  Outputs		  "1"
	}
	Block {
	  BlockType		  S-Function
	  Name			  " SFunction "
	  SID			  "1251::49"
	  Tag			  "Stateflow S-Function SimulinkModel_Template 1"
	  Ports			  [2, 2]
	  Position		  [180, 100, 230, 160]
	  ZOrder		  5
	  FunctionName		  "sf_sfun"
	  Parameters		  "ElementsStruct,NumFreeDOF,RigidLinkMasterMatrix,RigidLinkNo,RigidLinkNodeID,RigidLinkSlaveMatrix"
	  PortCounts		  "[2 2]"
	  EnableBusSupport	  off
	  Port {
	    PortNumber		    2
	    Name		    "Total_RF"
	    RTWStorageClass	    "Auto"
	    DataLoggingNameMode	    "SignalName"
	  }
	}
	Block {
	  BlockType		  Terminator
	  Name			  " Terminator "
	  SID			  "1251::52"
	  Position		  [460, 171, 480, 189]
	  ZOrder		  8
	}
	Block {
	  BlockType		  Outport
	  Name			  "Total_RF"
	  SID			  "1251::5"
	  Position		  [460, 101, 480, 119]
	  IconDisplay		  "Port number"
	}
	Line {
	  SrcBlock		  "Displacement"
	  SrcPort		  1
	  DstBlock		  " SFunction "
	  DstPort		  1
	}
	Line {
	  SrcBlock		  "Velocity"
	  SrcPort		  1
	  DstBlock		  " SFunction "
	  DstPort		  2
	}
	Line {
	  Name			  "Total_RF"
	  Labels		  [0, 0]
	  SrcBlock		  " SFunction "
	  SrcPort		  2
	  DstBlock		  "Total_RF"
	  DstPort		  1
	}
	Line {
	  SrcBlock		  " Demux "
	  SrcPort		  1
	  DstBlock		  " Terminator "
	  DstPort		  1
	}
	Line {
	  SrcBlock		  " SFunction "
	  SrcPort		  1
	  DstBlock		  " Demux "
	  DstPort		  1
	}
      }
    }
    Block {
      BlockType		      RateTransition
      Name		      "Rate Transition"
      SID		      "1437"
      Position		      [495, 42, 535, 58]
      BlockMirror	      on
      BackgroundColor	      "green"
      NamePlacement	      "alternate"
      Deterministic	      off
      OutPortSampleTime	      "SampleRate"
    }
    Block {
      BlockType		      RateTransition
      Name		      "Rate Transition1"
      SID		      "1438"
      Position		      [585, 197, 625, 213]
      BackgroundColor	      "green"
      NamePlacement	      "alternate"
      Deterministic	      off
      OutPortSampleTime	      "sample"
    }
    Block {
      BlockType		      RateTransition
      Name		      "Rate Transition2"
      SID		      "1439"
      Position		      [585, 222, 625, 238]
      BackgroundColor	      "green"
      Deterministic	      off
      OutPortSampleTime	      "sample"
    }
    Block {
      BlockType		      RateTransition
      Name		      "Rate Transition3"
      SID		      "1935"
      Position		      [250, 337, 290, 353]
      BackgroundColor	      "green"
      Deterministic	      off
      OutPortSampleTime	      "sample"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace"
      SID		      "1443"
      Ports		      [1]
      Position		      [315, 105, 375, 135]
      VariableName	      "A_Disp"
      MaxDataPoints	      "Integrator.Steps"
      SampleTime	      "-1"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace1"
      SID		      "1444"
      Ports		      [1]
      Position		      [315, 280, 375, 310]
      VariableName	      "A_RF"
      MaxDataPoints	      "Integrator.Steps"
      SampleTime	      "-1"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace2"
      SID		      "1928"
      Ports		      [1]
      Position		      [315, 155, 375, 185]
      VariableName	      "A_Vel"
      MaxDataPoints	      "Integrator.Steps"
      SampleTime	      "-1"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace3"
      SID		      "1929"
      Ports		      [1]
      Position		      [315, 60, 375, 90]
      VariableName	      "A_Accel"
      MaxDataPoints	      "Integrator.Steps"
      SampleTime	      "-1"
    }
    Block {
      BlockType		      ToWorkspace
      Name		      "To Workspace4"
      SID		      "1930"
      Ports		      [1]
      Position		      [315, 330, 375, 360]
      VariableName	      "A_Step"
      MaxDataPoints	      "Integrator.Steps"
      SampleTime	      "-1"
    }
    Block {
      BlockType		      UnitDelay
      Name		      "Unit Delay\nRemove for\nxPC"
      SID		      "1436"
      Position		      [855, 222, 895, 238]
      BackgroundColor	      "green"
      NamePlacement	      "alternate"
      InputProcessing	      "Elements as channels (sample based)"
      SampleTime	      "-1"
    }
    Line {
      SrcBlock		      "CR Acceleration\nTiming"
      SrcPort		      1
      Points		      [20, 0]
      DstBlock		      "Calc Accel Vector"
      DstPort		      trigger
    }
    Line {
      SrcBlock		      "Calculate Command Vectors"
      SrcPort		      4
      Points		      [30, 0; 0, 85]
      DstBlock		      "To Workspace1"
      DstPort		      1
    }
    Line {
      SrcBlock		      "Calc Accel Vector"
      SrcPort		      1
      DstBlock		      "Unit Delay\nRemove for\nxPC"
      DstPort		      1
    }
    Line {
      SrcBlock		      "Calculate Command Vectors"
      SrcPort		      1
      Points		      [65, 0]
      Branch {
	Points			[0, -30]
	DstBlock		"To Workspace"
	DstPort			1
      }
      Branch {
	Points			[0, 70]
	DstBlock		"Numerical Element Calculations"
	DstPort			1
      }
    }
    Line {
      SrcBlock		      "Rate Transition"
      SrcPort		      1
      Points		      [-210, 0]
      Branch {
	Points			[-235, 0]
	DstBlock		"Calculate Command Vectors"
	DstPort			1
      }
      Branch {
	Points			[0, 25]
	DstBlock		"To Workspace3"
	DstPort			1
      }
    }
    Line {
      SrcBlock		      "Calculate Command Vectors"
      SrcPort		      2
      Points		      [75, 0]
      Branch {
	DstBlock		"To Workspace2"
	DstPort			1
      }
      Branch {
	Points			[0, 70]
	DstBlock		"Numerical Element Calculations"
	DstPort			2
      }
    }
    Line {
      SrcBlock		      "Calculate Command Vectors"
      SrcPort		      5
      Points		      [20, 0]
      DstBlock		      "Rate Transition3"
      DstPort		      1
    }
    Line {
      SrcBlock		      "Unit Delay\nRemove for\nxPC"
      SrcPort		      1
      Points		      [15, 0; 0, -180]
      DstBlock		      "Rate Transition"
      DstPort		      1
    }
    Line {
      SrcBlock		      "Rate Transition3"
      SrcPort		      1
      DstBlock		      "To Workspace4"
      DstPort		      1
    }
    Line {
      SrcBlock		      "Rate Transition1"
      SrcPort		      1
      DstBlock		      "Calc Accel Vector"
      DstPort		      1
    }
    Line {
      SrcBlock		      "Rate Transition2"
      SrcPort		      1
      DstBlock		      "Calc Accel Vector"
      DstPort		      2
    }
    Line {
      SrcBlock		      "Numerical Element Calculations"
      SrcPort		      1
      DstBlock		      "Rate Transition2"
      DstPort		      1
    }
    Line {
      SrcBlock		      "Calculate Command Vectors"
      SrcPort		      3
      Points		      [55, 0; 0, 15]
      DstBlock		      "Rate Transition1"
      DstPort		      1
    }
  }
}
# Finite State Machines
#
#    Stateflow Version 7.6 (R2011b) dated Jan 25 2012, 21:03:37
#
#


Stateflow {
  machine {
    id			    1
    name		    "SimulinkModel_Template"
    created		    "01-Jan-2006 12:00:00"
    isLibrary		    0
    firstTarget		    16
    sfVersion		    76014001.00040001
  }
  chart {
    id			    2
    name		    "Numerical Element Calculations"
    windowPosition	    [420.75 158.25 200.25 189.75]
    viewLimits		    [0 156.75 0 153.75]
    screen		    [1 1 1920 1200 1.333333333333333]
    treeNode		    [0 3 0 0]
    firstTransition	    5
    firstJunction	    4
    viewObj		    2
    machine		    1
    subviewS {
    }
    ssIdHighWaterMark	    27
    decomposition	    CLUSTER_CHART
    type		    EML_CHART
    firstData		    6
    chartFileNumber	    1
    disableImplicitCasting  1
    eml {
      name		      "eml"
    }
  }
  state {
    id			    3
    labelString		    "eML_blk_kernel()"
    position		    [18 64.5 118 66]
    fontSize		    12
    chart		    2
    treeNode		    [2 0 0 0]
    superState		    SUBCHART
    subviewer		    2
    ssIdNumber		    1
    type		    FUNC_STATE
    decomposition	    CLUSTER_STATE
    eml {
      isEML		      1
      script		      "%TODO: Els:3,5,7\n\n% Get restoring force for each element\n% Returns (6x1) restoring force vecto"
      "r of all elements in global coordinates\nfunction Total_RF    = eml(NumFreeDOF, Displacement, Velocity, Elements"
      "Struct, RigidLinkNo, RigidLinkNodeID, RigidLinkMasterMatrix, RigidLinkSlaveMatrix)\n    % Store the Elements in "
      "memory\n    persistent Elements;\n    persistent TotalRF;\n    if isempty(Elements)\n        Elements = Elements"
      "Struct;        \n    end\n    \n    % Storage for the Global Restoring Force\n    TotalRF = zeros(NumFreeDOF, 1)"
      ";            \n    \n%Elements  %*s\n\n\n%*e\n                             \n    Total_RF = TotalRF;\nend\n\n\n%"
      "%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\nfunction TotalRF = AssembleElementGl"
      "obalRF6DOF(Element, ElementRF, TotalRF)\n    % Assemble the structure restoring force vector based on the\n    %"
      " degrees of freedom node locations.  \n    ndof = 6;\n    dof6 = zeros(6,1); \n    dof6(1,1)=Element.Nodes(1).UX"
      ";\n    dof6(2,1)=Element.Nodes(1).UY;\n    dof6(3,1)=Element.Nodes(1).THETA;\n    dof6(4,1)=Element.Nodes(2).UX;"
      "\n    dof6(5,1)=Element.Nodes(2).UY;\n    dof6(6,1)=Element.Nodes(2).THETA;      \n\n    % Add to the TotalRF\n "
      "   for i=1:ndof\n        if dof6(i,1) ~= -1\n          TotalRF(dof6(i,1), 1) = ElementRF(i, 1) + TotalRF(dof6(i,"
      "1), 1);\n        end\n    end    \nend\n\nfunction TotalRF = AssembleElementGlobalRF9DOF(Element, ElementRF, Tot"
      "alRF)\n    % Assemble the structure restoring force vector based on the\n    % degrees of freedom node locations"
      ".  \n    ndof = 12;\n    dof12 = zeros(12,1); \n    dof12(1,1)=Element.Nodes(1).UX;\n    dof12(2,1)=Element.Node"
      "s(1).UY;\n    dof12(3,1)=Element.Nodes(1).THETA;\n    dof12(4,1)=Element.Nodes(2).UX;\n    dof12(5,1)=Element.No"
      "des(2).UY;\n    dof12(6,1)=Element.Nodes(2).THETA;  \n    dof12(7,1)=Element.Nodes(3).UX;\n    dof12(8,1)=Elemen"
      "t.Nodes(3).UY;\n    dof12(9,1)=Element.Nodes(3).THETA;\n    dof12(10,1)=Element.Nodes(4).UX;\n    dof12(11,1)=El"
      "ement.Nodes(4).UY;\n    dof12(12,1)=Element.Nodes(4).THETA;\n\n    % Add to the TotalRF\n    for i=1:ndof\n     "
      "   if dof12(i,1) ~= -1\n          TotalRF(dof12(i,1), 1) = ElementRF(i, 1) + TotalRF(dof12(i,1), 1);\n        en"
      "d\n    end    \nend\n\n%% Element 1\nfunction [Element, RestoringForce] = GetRestoringForce_Type1(Element, Displ"
      "acement, RigidLinkNo, RigidLinkNodeID, RigidLinkMasterMatrix, RigidLinkSlaveMatrix)\n    % Get distance between "
      "nodes\n    X21 = Element.Nodes(2).Xcoord - Element.Nodes(1).Xcoord;\n    Y21 = Element.Nodes(2).Ycoord - Element"
      ".Nodes(1).Ycoord;\n    EL = sqrt(X21 * X21 + Y21 * Y21);\n    EAL = Element.Material.E * Element.Area / EL;\n   "
      " EIZL = Element.Material.E * Element.Inertia / EL;    \n    % Calculation of density (the uniform load is only t"
      "aken into account)\n    SEP = zeros(6);\n    SEP(1, 1) = EAL;\n    SEP(1, 4) = -EAL;\n    SEP(4, 4) = EAL;\n    "
      "SEP(2, 2) = 12 * EIZL / EL ^ 2;\n    SEP(2, 3) = 6 * EIZL / EL;\n    SEP(2, 5) = -SEP(2, 2);\n    SEP(2, 6) = SE"
      "P(2, 3);\n    SEP(3, 3) = 4 * EIZL;\n    SEP(3, 5) = -6 * EIZL / EL;\n    SEP(3, 6) = 2 * EIZL;\n    SEP(5, 5) ="
      " 12 * EIZL / EL ^ 2;\n    SEP(5, 6) = -6 * EIZL / EL;\n    SEP(6, 6) = 4 * EIZL;\n    for i = 1:6\n       for j "
      "= i:6\n          SEP(j, i) = SEP(i, j);\n       end\n    end\n    DCOS = zeros(3);\n    DCOS(1, 1) = X21 / EL;\n"
      "    DCOS(1, 2) = Y21 / EL;\n    DCOS(1, 3) = 0;\n    DCOS(2, 1) = -DCOS(1, 2);\n    DCOS(2, 2) = DCOS(1, 1);\n  "
      "  DCOS(2, 3) = 0;\n    DCOS(3, 1) = 0;\n    DCOS(3, 2) = 0;\n    DCOS(3, 3) = 1;\n    ALMBDA = zeros(6);       \n"
      "    for i = 1:2\n       IK = 3 * (i - 1);\n       for j = 1:3\n          for k = 1:3\n             ALMBDA(j + IK"
      ", k + IK) = DCOS(j, k);\n          end\n       end\n    end\n    SE = ALMBDA' * SEP * ALMBDA;\n    % Create the "
      "displacement Ue (6x1) vector of the element in global coordinates\n    Ue = zeros(6,1);\n    dof = zeros(6,1);\n"
      "    dof(1,1)=Element.Nodes(1).UX;\n    dof(2,1)=Element.Nodes(1).UY;\n    dof(3,1)=Element.Nodes(1).THETA;\n    "
      "dof(4,1)=Element.Nodes(2).UX;\n    dof(5,1)=Element.Nodes(2).UY;\n    dof(6,1)=Element.Nodes(2).THETA;\n    \n  "
      "  for i=1:6\n        if dof(i,1) ~= -1\n            Ue(i,1)=Displacement(dof(i,1),1);\n        end\n    end\n\n "
      "   % Calculation Restoring Force, considering the Rigid Links if used\n    if( RigidLinkNo )\n        TR = Rigid"
      "LinkTransformation2Nodes(Element.Nodes(1).ID, Element.Nodes(2).ID, RigidLinkNo, RigidLinkNodeID, RigidLinkMaster"
      "Matrix, RigidLinkSlaveMatrix);\n        RestoringForce = TR' * SE * TR * Ue;  % (6x1) resisting force vector of "
      "element in global coordinates\n    else        \n        RestoringForce = SE * Ue;  % (6x1) resisting force vect"
      "or of element in global coordinates\n    end\nend\n\n%% Element 2\nfunction [Element, RestoringForce] = GetResto"
      "ringForce_Type2(Element, Displacement, RigidLinkNo, RigidLinkNodeID, RigidLinkMasterMatrix, RigidLinkSlaveMatrix"
      ")\n    % Preset arrays\n    SE = zeros(6,6);\n    SE(1, 1) = Element.Stiffness;\n    SE(1, 4) = -Element.Stiffne"
      "ss;\n    SE(4, 4) = Element.Stiffness;\n    SE(4, 1) = SE(1,4);\n    \n    % Create the displacement Ue (6x1) ve"
      "ctor of the element in global coordinates\n    Ue = zeros(6,1);\n    dof = zeros(6,1);\n    dof(1,1)=Element.Nod"
      "es(1).UX;\n    dof(2,1)=Element.Nodes(1).UY;\n    dof(3,1)=Element.Nodes(1).THETA;\n    dof(4,1)=Element.Nodes(2"
      ").UX;\n    dof(5,1)=Element.Nodes(2).UY;\n    dof(6,1)=Element.Nodes(2).THETA;\n    \n    for i=1:6\n        if "
      "dof(i,1) ~= -1\n            Ue(i,1)=Displacement(dof(i,1),1);\n        end\n    end\n\n    % Calculation Restori"
      "ng Force, considering the Rigid Links if used\n    if( RigidLinkNo )\n        TR = RigidLinkTransformation2Nodes"
      "(Element.Nodes(1).ID, Element.Nodes(2).ID, RigidLinkNo, RigidLinkNodeID, RigidLinkMasterMatrix, RigidLinkSlaveMa"
      "trix);\n        RestoringForce = TR' * SE * TR * Ue;  % (6x1) resisting force vector of element in global coordi"
      "nates\n    else\n%         if (RUNMODE_BIT)\n%             RestoringForce = zeros(6,1);\n%             Restoring"
      "Force(1,1) = Element2Input;\n%             RestoringForce(4,1) = -Element2Input;\n%         else\n            Re"
      "storingForce = SE * Ue;  % (6x1) resisting force vector of element in global coordinates\n%         end\n    end"
      "    \nend\n\n%% Element 3\n\n%% Element 4\nfunction [Element, RestoringForce] = GetRestoringForce_Type4(Element,"
      " Displacement, RigidLinkNo, RigidLinkNodeID, RigidLinkMasterMatrix, RigidLinkSlaveMatrix)\n\n    % element geome"
      "try       \n    % element deformation % geometry restricted to 1,2 plane (x,y)\n    dx = Element.xyj(1,1) - Elem"
      "ent.xyi(1,1); \n    dy = Element.xyj(2,1) - Element.xyi(2,1);\n    L = sqrt(dx*dx+dy*dy);\n    dx = dx / L;\n   "
      " dy = dy / L;\n\n    % 6x6 transformation matrix from local to global coordiante\n    apq  = zeros(6);\n    apq("
      "1,1) = dx; apq(2,2) = dx; apq(4,4) = dx; apq(5,5)= dx;\n    apq(1,2) = dy; apq(2,1) =-dy; apq(4,5) = dy; apq(5,4"
      ")=-dy;\n    apq(3,3) = 1.0; apq(6,6) =1.0;\n\n    % element stiffness matrix in local coordinate\n    SE = zeros"
      "(6,6);  \n    SE(2, 2) = Element.K22;\n    SE(2, 5) = Element.K25;\n    SE(5, 2) = Element.K52;\n    SE(5, 5) = "
      "Element.K55;\n    % transformed element stiffness matrix in global coordinate\n    SE = apq' * SE * apq;\n\n    "
      "% Create the displacement Ue (6x1) vector of the element in global coordinates\n    Ue = zeros(6,1);\n    dof = "
      "zeros(6,1);\n    dof(1,1)=Element.Nodes(1).UX;\n    dof(2,1)=Element.Nodes(1).UY;\n    dof(3,1)=Element.Nodes(1)"
      ".THETA;\n    dof(4,1)=Element.Nodes(2).UX;\n    dof(5,1)=Element.Nodes(2).UY;\n    dof(6,1)=Element.Nodes(2).THE"
      "TA;\n\n    for i=1:6\n        if dof(i,1) ~= -1\n            Ue(i,1) = Displacement(dof(i,1),1);\n        end\n "
      "   end\n    \n    % Calculation Restoring Force, considering the Rigid Links if used\n    if( RigidLinkNo )\n   "
      "     TR = RigidLinkTransformation2Nodes(Element.Nodes(1).ID, Element.Nodes(2).ID, RigidLinkNo, RigidLinkNodeID, "
      "RigidLinkMasterMatrix, RigidLinkSlaveMatrix);\n        RestoringForce = TR' * SE * TR * Ue;  % (6x1) resisting f"
      "orce vector of element in global coordinates\n    else\n        RestoringForce = SE * Ue;  % (6x1) resisting for"
      "ce vector of element in global coordinates\n    end\nend\n\n%% Element 5\n\n%% Element 6\nfunction [Element,Rest"
      "oringForce] = GetRestoringForce_Type6(Element, Displacement, RigidLinkNo, RigidLinkNodeID, RigidLinkMasterMatrix"
      ", RigidLinkSlaveMatrix)\n    % Get the displacement Ue (6x1) vector of the element in global coordinates\n    Ue"
      " = zeros(6,1);\n    dof=zeros(6,1);\n    dof(1,1)=Element.Nodes(1).UX;\n    dof(2,1)=Element.Nodes(1).UY;\n    d"
      "of(3,1)=Element.Nodes(1).THETA;\n    dof(4,1)=Element.Nodes(2).UX;\n    dof(5,1)=Element.Nodes(2).UY;\n    dof(6"
      ",1)=Element.Nodes(2).THETA;\n    for i=1:6\n        if dof(i,1) ~= -1\n            Ue(i,1)=Displacement(dof(i,1)"
      ",1);\n        end\n    end\n\n    % Calculation Restoring Force, considering the Rigid Links if used\n    if( Ri"
      "gidLinkNo )\n        TR = RigidLinkTransformation2Nodes(Element.Nodes(1).ID, Element.Nodes(2).ID, RigidLinkNo, R"
      "igidLinkNodeID, RigidLinkMasterMatrix, RigidLinkSlaveMatrix);        \n        Ue = TR * Ue; \n    end       \n\n"
      "    du=Ue-Element.Uprev;  % The incremental displacement vector du of the element in global coordinates \n    El"
      "ement.Uprev=Ue; %Update Uprev of element for use in next state determination call\n\n    % element deformation %"
      " geometry restricted to 1,2 plane (x,y)\n    dx = Element.xyj(1,1) - Element.xyi(1,1); \n    dy = Element.xyj(2,"
      "1) - Element.xyi(2,1);\n    L = sqrt(dx*dx+dy*dy);\n    dx = dx / L;\n    dy = dy / L;\n\n    % Form transformat"
      "ion matrix from element in global coordinate to basic system\n    avq  = [ -dy/L  dx/L  1  dy/L -dx/L  0;\n     "
      "      -dy/L  dx/L  0  dy/L -dx/L  1;\n           -dx   -dy    0  dx    dy    0];\n\n    % Incremental basic defo"
      "rmations\n    dv = avq * du;        \n\n    % Interpolation functions (B matrix) evaluated at integration points"
      "\n    x  = ( Element.xi + 1 ) / 2;\n    b1 = (6*x-4)/L;\n    b2 = (6*x-2)/L;\n    b3 = ones(size(x))/L;\n\n    %"
      " Integrate basic force and basic stiffness matrix\n    kb = zeros(3);\n    s  = zeros(3,1);\n\n    for i=1:lengt"
      "h(Element.sections)\n\n        % Form B matrix and compute section deformation\n        B = [ b1(i) b2(i) 0; 0 0"
      " b3(i) ];\n        dvs = B * dv;  \n\n        % Section state determination and update section state\n        [s"
      "s ks Element.sections(i)] = SectionState( Element.sections(i), dvs );\n\n        % Sum section term\n        kb "
      "= kb + B'*ks*B * ( Element.wi(i) * L/2 );\n        s  = s  + B'*ss   * ( Element.wi(i) * L/2 );\n\n    end\n\n  "
      "  % Restoring force and stiffness matrix\n    RestoringForce = avq' * s;\n\n    if( RigidLinkNo )\n        Resto"
      "ringForce = TR' * RestoringForce;  \n    end\nend\n\n%% Element 7\n\n%% Element 8\nfunction [Element,RestoringFo"
      "rce] = GetRestoringForce_Type8(Element, Displacement, Velocity, RigidLinkNo, RigidLinkNodeID, RigidLinkMasterMat"
      "rix, RigidLinkSlaveMatrix)\n    % Get the displacement Ue (6x1) vector of the element in global coordinates\n   "
      " Uev = zeros(6,1);\n    Vev = zeros(6,1);\n    dof=zeros(6,1);\n    dof(1,1)=Element.Nodes(1).UX;\n    dof(2,1)="
      "Element.Nodes(1).UY;\n    dof(3,1)=Element.Nodes(1).THETA;\n    dof(4,1)=Element.Nodes(2).UX;\n    dof(5,1)=Elem"
      "ent.Nodes(2).UY;\n    dof(6,1)=Element.Nodes(2).THETA;\n    for i=1:6\n        if dof(i,1) ~= -1\n            Ue"
      "v(i,1)=Displacement(dof(i,1),1);\n            Vev(i,1)=Velocity(dof(i,1),1);        \n        end\n    end\n\n  "
      "  % Calculation Restoring Force, considering the Rigid Links if used\n    if( RigidLinkNo )\n        TR = RigidL"
      "inkTransformation2Nodes(Element.Nodes(1).ID, Element.Nodes(2).ID, RigidLinkNo, RigidLinkNodeID, RigidLinkMasterM"
      "atrix, RigidLinkSlaveMatrix);        \n        Uev = TR * Uev; \n        Vev = TR * Vev; \n    end \n\n    % Def"
      "ormation and velocity\n    % if Element.dof ==1\n    Ue = Uev(Element.dof,1)-Uev(Element.dof+3,1);\n    Ve = Vev"
      "(Element.dof,1)-Vev(Element.dof+3,1);\n    % elseif Element.dof ==2\n    %     Ue = Uev(2,1)-Uev(5,1);\n    %   "
      "  Ve = Vev(2,1)-Vev(5,1);\n    % else\n    %     Ue = Uev(3,1)-Uev(6,1);\n    %     Ve = Vev(3,1)-Vev(6,1);\n   "
      " % end\n\n    % Incremental displacement and velocity\n    % the incremental deformation of the element \n    % "
      "Update max and min deformation history\n    % Element.prop.Dmax= max(Ue,Element.prop.Dmax); \n    % Element.prop"
      ".Dmin= min(Ue,Element.prop.Dmin); \n    du = Ue - Element.Uprev;\n    [Element.prop kt Fs] = MaterialState(du, E"
      "lement.prop, Ve);\n\n    RestoringForce=zeros(6,1);\n    RestoringForce(Element.dof,1)   = Fs;\n    RestoringFor"
      "ce(Element.dof+3,1) = -Fs;\n\n    if( RigidLinkNo )\n        RestoringForce = TR' * RestoringForce;  \n    end\n"
      "\n    % Update Uprev\n    Element.Uprev=Ue; \nend\n\n\n%% Element 9\nfunction [Element,RestoringForce] = GetRest"
      "oringForce_Type9(Element, Displacement, RigidLinkNo, RigidLinkNodeID, RigidLinkMasterMatrix, RigidLinkSlaveMatri"
      "x)\n\n%% Get the displacement Ue (12x1) vector of the element in global coordinates\nndof=12;  \nUe = zeros(ndof"
      ",1);\ndof=zeros(ndof,1);\ndof(1,1)=Element.Nodes(1).UX;\ndof(2,1)=Element.Nodes(1).UY;\ndof(3,1)=Element.Nodes(1"
      ").THETA;\ndof(4,1)=Element.Nodes(2).UX;\ndof(5,1)=Element.Nodes(2).UY;\ndof(6,1)=Element.Nodes(2).THETA;\ndof(7,"
      "1)=Element.Nodes(3).UX;\ndof(8,1)=Element.Nodes(3).UY;\ndof(9,1)=Element.Nodes(3).THETA;\ndof(10,1)=Element.Node"
      "s(4).UX;\ndof(11,1)=Element.Nodes(4).UY;\ndof(12,1)=Element.Nodes(4).THETA;\n\nfor i=1:ndof\n    if dof(i,1) ~= "
      "-1\n        Ue(i,1)=Displacement(dof(i,1),1);\n    end\nend\n\n% Calculation Restoring Force, considering the Ri"
      "gid Links if used\nif( RigidLinkNo )\n    TR = RigidLinkTransformation4Nodes(Element.Nodes(1).ID, Element.Nodes("
      "2).ID, Element.Nodes(3).ID, Element.Nodes(4).ID, RigidLinkNo, RigidLinkNodeID, RigidLinkMasterMatrix, RigidLinkS"
      "laveMatrix);        \n    Ue = TR * Ue; \nend   \n\n% The incremental displacement vector du of the element in g"
      "lobal coordinates\n% The element has 12 dofs\n% Update Uprev of element for use in next state determination call"
      "\ndu=Ue-Element.Uprev;  \nElement.Uprev=Ue; \n\n% transform global node displacement to basic deformation\nv = E"
      "lement.avq*Ue;\n\n% compute element force\ns = zeros(9,1); \n\ns(1) = Element.kb1*v(1);\ns(2) = Element.kb2*v(2)"
      ";\ns(4) = Element.kb4*v(4);\ns(5) = Element.kb5*v(5);\ns(6) = Element.kb6*v(6);\ns(7) = Element.kb7*v(7);\ns(8) "
      "= Element.kb8*v(8);\ns(9) = Element.kb9*v(9);\n\ndv3 = Element.dx/Element.Width*du(10)-Element.dy/Element.Width*"
      "du(5)-Element.dx/Element.Width*du(4)+Element.dy/Element.Width*du(11)-Element.Height/Element.Width*Element.dx/Ele"
      "ment.Width*du(2)...\n    +Element.Height/Element.Width*Element.dy/Element.Width*du(1)+Element.Height/Element.Wid"
      "th*Element.dx/Element.Width*du(8)-Element.Height/Element.Width*Element.dy/Element.Width*du(7);\n\n% compute shea"
      "r deformation mode\n[Element.ShearProp , tmp, s(3)]= MaterialState(dv3, Element.ShearProp, 0);\n\n% Restoring fo"
      "rce and stiffness matrix\nRestoringForce = Element.avq' * s;\n\nif( RigidLinkNo )\n    RestoringForce = TR' * Re"
      "storingForce;  \nend\n\n% function [pro] = trilinear(dx, pro)\n% \n% % calculate current deformation \n%     x ="
      " pro.xprev + dx; \n% \n% if pro.YieldCode == 0\n% \n% 	pro.Fs1 = pro.Fs1+pro.K1*dx;\n%     pro.Fs2 = pro.Fs2+pro"
      ".K2*dx;\n% 	% if it is beyond elastic range, limit to yield force\n% 	% and set m_nYieldCode to 1\n% 	if pro.Fs1"
      " > pro.Fy1\n% 		\n%         pro.Fs1 = pro.Fy1 ;\n% 		pro.YieldCode = 1;\n%         \n%         if(pro.Fs2> pro.F"
      "y2)\n% 			pro.Fs2 = pro.Fy2 ;\n% 		    pro.YieldCode = 2;\n%         end\n%     elseif pro.Fs1 < -pro.Fy1\n% 		\n"
      "%         pro.Fs1 = -pro.Fy1;\n% 		pro.YieldCode = 1 ;\n%        \n% 		if pro.Fs2 < -pro.Fy2\n% 			pro.Fs2 = - p"
      "ro.Fy2 ;\n% 		    pro.YieldCode = 2;\n%         end\n%     end\n% % 1st post-yielding region    \n% elseif pro.Y"
      "ieldCode == 1\n%     \n%     % assume spring2 remain elastic\n%     pro.Fs2= pro.Fs2+pro.K2*dx;\n%     \n%     %"
      " keep loading\n%     if pro.Fs1*dx > 0.\n%         if pro.Fs2 > pro.Fy2\n%             pro.Fs2 = pro.Fy2;\n%    "
      "         pro.YieldCode=2;            \n%         elseif pro.Fs2 < -pro.Fy2\n%             pro.Fs2 = -pro.Fy2;\n%"
      "             pro.YieldCode=2;\n%         end\n%         % unloading\n%     elseif pro.Fs1*dx < 0.\n%         pro"
      ".Fs1= pro.Fs1 + pro.K1*dx;\n%         pro.YieldCode = 0;\n%         \n%         if pro.Fs1 < -pro.Fy1 \n%       "
      "      pro.Fs1 = -pro.Fy1;\n%             pro.YieldCode = 1;\n%             if pro.Fs2 < -pro.Fy2\n%             "
      "    pro.Fs2 = -pro.Fy2;\n%                 pro.YieldCode = 2;\n%             end\n%         elseif pro.Fs1 > pro"
      ".Fy1\n%             pro.Fs1 = pro.Fy1;\n%             pro.YieldCode = 1;\n%             if pro.Fs2 > pro.Fy2\n% "
      "                pro.Fs2 = pro.Fy2;\n%                 pro.YieldCode = 2;\n%             end\n%         end\n%   "
      "  end\n% elseif pro.YieldCode ==2\n%     % unloading\n% 	if (pro.Fs1*dx) < 0.\n% 		pro.Fs1 = pro.Fs1 + pro.K1*dx"
      ";\n% 		pro.Fs2 = pro.Fs2 + pro.K2*dx;\n% 		pro.YieldCode = 0;\n% 		\n%         if pro.Fs1 < -pro.Fy1\n%         "
      "    pro.Fs1 = -pro.Fy1;\n% 			pro.YieldCode = 1;\n%             if pro.Fs2 < -pro.Fy2\n% 				pro.Fs2 = -pro.Fy2;"
      "\n% 				pro.YieldCode = 2;\n%             end            \n%         elseif pro.Fs1 > pro.Fy1\n% 			pro.Fs1 = pr"
      "o.Fy1;\n% 			pro.YieldCode = 1;\n%             if pro.Fs2> pro.Fy2\n% 				pro.Fs2 = pro.Fy2;\n% 				pro.YieldCod"
      "e = 2;\n% 			end\n%         end\n%     end\n% end\n% \n% pro.Fs = pro.Fs1 + pro.Fs2 + pro.K3*x;\n% \n% % updata "
      "current state for next time step\n% if pro.YieldCode == 0\n%     pro.Kt = pro.K1 +pro.K2 +pro.K3;\n% elseif pro."
      "YieldCode == 1\n%     pro.Kt = pro.K2 +pro.K3;    \n% else\n%     pro.Kt = pro.K3;\n% end\n% pro.xprev = x;\n\ne"
      "nd\n    \n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%"
      "%%%%% Helper Functions %%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%"
      "%%%%%%%%%%%%%%%%%\n\n%% Rigid Link Tranformation Matrix Calculation for 2 Nodes, 6 DOF\nfunction TR = RigidLinkT"
      "ransformation2Nodes(Node1ID, Node2ID, RigidLinkNo, RigidLinkNodeID, RigidLinkMasterMatrix, RigidLinkSlaveMatrix)"
      "\n    % Rigid Link Calculations\n    TR = eye(6,6); % Transformation matrix for rigid link\n    if( RigidLinkNo "
      ")    \n        % Find the row with the slave node, if it exists in the element\n        idx = 0;\n        for kk"
      " = 1:RigidLinkNo\n            if (RigidLinkNodeID(kk,2) == Node1ID)\n                idx = kk;\n                "
      "break;\n            end\n        end\n        %idx=find(RigidLinkNodeID(:,2) == Node1ID); % find if a slave node"
      " exists in the element\n        if ( idx )\n            TL=CalculateRigidLinkTransformation(RigidLinkMasterMatri"
      "x(idx,2),RigidLinkMasterMatrix(idx,3),RigidLinkSlaveMatrix(idx,2),RigidLinkSlaveMatrix(idx,3));\n            jjj"
      " = 1; % Node 1\n            TR(3*(jjj-1)+1:3*jjj,3*(jjj-1)+1:3*jjj) = TL;\n        end\n        idx = 0;\n      "
      "  for kk = 1:RigidLinkNo\n            if (RigidLinkNodeID(kk,2) == Node2ID)\n                idx = kk;\n        "
      "        break;\n            end\n        end    \n        %idx=find(RigidLinkNodeID(:,2) == Node2ID); % find if "
      "a slave node exists in the element\n        if ( idx )\n            TL=CalculateRigidLinkTransformation(RigidLin"
      "kMasterMatrix(idx,2),RigidLinkMasterMatrix(idx,3),RigidLinkSlaveMatrix(idx,2),RigidLinkSlaveMatrix(idx,3));     "
      "       \n            jjj = 2; % Node 2\n            TR(3*(jjj-1)+1:3*jjj,3*(jjj-1)+1:3*jjj) = TL;\n        end  "
      "          \n    end\nend\n\n%% Rigid Link Tranformation Matrix Calculation for 4 Nodes, 12 DOF\nfunction TR = Ri"
      "gidLinkTransformation4Nodes(Node1ID, Node2ID, Node3ID, Node4ID, RigidLinkNo, RigidLinkNodeID, RigidLinkMasterMat"
      "rix, RigidLinkSlaveMatrix)\n    % Rigid Link Calculations\n    TR = eye(12,12); % Transformation matrix for rigi"
      "d link\n    if( RigidLinkNo )    \n        % Find the row with the slave node, if it exists in the element\n    "
      "    idx = 0;\n        for kk = 1:RigidLinkNo\n            if (RigidLinkNodeID(kk,2) == Node1ID)\n               "
      " idx = kk;\n                break;\n            end\n        end\n        %idx=find(RigidLinkNodeID(:,2) == Node"
      "1ID); % find if a slave node exists in the element\n        if ( idx )\n            TL=CalculateRigidLinkTransfo"
      "rmation(RigidLinkMasterMatrix(idx,2),RigidLinkMasterMatrix(idx,3),RigidLinkSlaveMatrix(idx,2),RigidLinkSlaveMatr"
      "ix(idx,3));\n            jjj = 1; % Node 1\n            TR(3*(jjj-1)+1:3*jjj,3*(jjj-1)+1:3*jjj) = TL;\n        e"
      "nd\n        idx = 0;\n        for kk = 1:RigidLinkNo\n            if (RigidLinkNodeID(kk,2) == Node2ID)\n       "
      "         idx = kk;\n                break;\n            end\n        end    \n        %idx=find(RigidLinkNodeID("
      ":,2) == Node2ID); % find if a slave node exists in the element\n        if ( idx )\n            TL=CalculateRigi"
      "dLinkTransformation(RigidLinkMasterMatrix(idx,2),RigidLinkMasterMatrix(idx,3),RigidLinkSlaveMatrix(idx,2),RigidL"
      "inkSlaveMatrix(idx,3));            \n            jjj = 2; % Node 2\n            TR(3*(jjj-1)+1:3*jjj,3*(jjj-1)+1"
      ":3*jjj) = TL;\n        end                \n        % Find the row with the slave node, if it exists in the elem"
      "ent\n        idx = 0;\n        for kk = 1:RigidLinkNo\n            if (RigidLinkNodeID(kk,2) == Node3ID)\n      "
      "          idx = kk;\n                break;\n            end\n        end\n        %idx=find(RigidLinkNodeID(:,2"
      ") == Node3ID); % find if a slave node exists in the element\n        if ( idx )\n            TL=CalculateRigidLi"
      "nkTransformation(RigidLinkMasterMatrix(idx,2),RigidLinkMasterMatrix(idx,3),RigidLinkSlaveMatrix(idx,2),RigidLink"
      "SlaveMatrix(idx,3));\n            jjj = 3; % Node 3\n            TR(3*(jjj-1)+1:3*jjj,3*(jjj-1)+1:3*jjj) = TL;\n"
      "        end\n        idx = 0;\n        for kk = 1:RigidLinkNo\n            if (RigidLinkNodeID(kk,2) == Node4ID)"
      "\n                idx = kk;\n                break;\n            end\n        end    \n        %idx=find(RigidLi"
      "nkNodeID(:,2) == Node4ID); % find if a slave node exists in the element\n        if ( idx )\n            TL=Calc"
      "ulateRigidLinkTransformation(RigidLinkMasterMatrix(idx,2),RigidLinkMasterMatrix(idx,3),RigidLinkSlaveMatrix(idx,"
      "2),RigidLinkSlaveMatrix(idx,3));            \n            jjj = 4; % Node 4\n            TR(3*(jjj-1)+1:3*jjj,3*"
      "(jjj-1)+1:3*jjj) = TL;\n        end          \n    end\nend\n\n%% Calculate Rigid Link Transformation\nfunction "
      "TL = CalculateRigidLinkTransformation(MNXcoord, MNYcoord, SNXcoord, SNYcoord)\n    X1 = MNXcoord; Y1 = MNYcoord;"
      "\n    X2 = SNXcoord;  Y2 = SNYcoord;\n    deltaX = X2 - X1;\n    deltaY = Y2 - Y1;\n    TL = [ 1 0 -deltaY;\n   "
      "        0 1  deltaX;\n           0 0  1    ];\nend\n\n%% State determination for fiber section\nfunction [ss, ks"
      ", sec] = SectionState( sec, dvs )\n% For section sec undergoing a change\n% in section deformation dvs=[curvatur"
      "e strain], compute\n% section forces SS=[moment axial] and the 2x2 tangents\n% section stiffness KS.\n    ks = z"
      "eros(2,2);\n    ss = zeros(2,1);  \n    numfib = length(sec.fibers);\n\n    % Loop over fibers\n    for i=1:numf"
      "ib\n        yi   = sec.fibers(i).yi;\n        area = sec.fibers(i).A;\n\n        % Change in strain\n        dep"
      "s = yi * dvs(1:2);\n\n        [sec.fibers(i).prop Et sc] = MaterialState(deps, sec.fibers(i).prop, 0 );        \n"
      "\n        % Integration -- add contribution of fiber \n        % for 3D --- following codes need to be modified\n"
      "        ks = ks + yi'*yi * (area*Et ); % may not need to do it\n        ss = ss + yi'    * (area*sc);\n    end\n"
      "end\n\n%% Material Section State\nfunction [ mat Et sc] = MaterialState( dep, mat, vc)  \n    %MATERIALSTATE Sum"
      "mary of this function goes here\n    %   dep = incremental deformation at the current time step, except for\n   "
      " %   Bouc-Wen model\n    %   mat = material data structure\n    %   vc  = 0 for other materials\n    %       = c"
      "urrent velocity for Bouc-Wen material\n    %\n    switch  mat.Type\n        case 2\n            mat = bilinearMa"
      "t(dep, mat);\n            Et = mat.Et;\n            sc = mat.sc;\n%         case 3\n%             mat = hysteret"
      "icMat(dep, mat);\n%             Et = mat.Ttangent;\n%             sc = mat.Cstress;\n        case 4\n           "
      " mat = BoucWen(dep, mat, vc);\n            Et = mat.k;\n            sc = mat.Qj;\n        case 5\n            ma"
      "t = trilinear(dep, mat);\n            Et = mat.Kt;\n            sc = mat.Fs;\n%         case 6\n%             ma"
      "t = SDegrading(dep, mat);\n%             Et = mat.Ktan;\n%             sc = mat.Fs;      \n    %     case 7\n   "
      " %         mat = ModifiedBW(dep, vc, mat);\n    %         Et = mat.k;\n    %         sc = mat.Qj;\n        other"
      "wise\n            Et = 0;\n            sc = 0;\n    end\nend\n\n%% Bilinear Material Section State\nfunction [ma"
      "t] = bilinearMat(deps, mat )\n    %	[mat]=BILINEARMAT(deps,mat) For strain increment deps\n    %	and mat compute"
      " new properties for bilinear material.\n    %	mat.SY, mat.E, mat.EP are the yield stress,\n    %	first slop and "
      "second slope respectively.  materialProp.SC,\n    %	mat.SB, materialSE are the current stress, back stress, and\n"
      "    %	current strain, respectively. mat.ET is the current tangent modulus.\n\n    % Material properties\n    sig"
      "y = mat.sy;		% yield stress\n    E    = mat.e;		% E\n    Ep   = mat.ep;		% alpha*E\n\n    % State from last conv"
      "erged load step\n    sig  = mat.sc;		% stress\n    sigb = mat.sb;		% backstress\n    code = mat.cd;		% yield cod"
      "e\n                        %	=0, elastic\n                        %	=1, plastic\n\n    if code==0 || ( code==1 &"
      "& (sig-sigb)*deps < 0 )\n        % Strain to plastic loading from elastic state\n        deps1 = ( sign(deps) * "
      "sigy + sigb - sig ) / E;\n\n        % Elastic\n        sig  = sig + E * deps;\n        Et   = E;\n        code ="
      " 0;\n\n        % Check if plasic loading from elastic state\n        if abs(deps) > abs(deps1)\n            sig "
      " = sig  + ( Ep - E ) * ( deps - deps1 );\n            sigb = sigb +   Ep       * ( deps - deps1 );\n            "
      "Et   = Ep;\n            code = 1;\n        end\n\n    else\n        % Continue plastic loading\n        sig  = s"
      "ig  + Ep * deps;\n        sigb = sigb + Ep * deps;\n        Et   = Ep;\n        code = 1;\n\n    end\n\n    % Re"
      "turn updated state. \n    mat.sc = sig;\n    mat.sb = sigb;\n    mat.cd = code;\n    mat.es = mat.es + deps;	\n "
      "   mat.Et = Et;\nend   \n% \n% %% Hysteretic Material Section State\n% function [mat] = hystereticMat(deps, mat)"
      "   \n%     mat.Tstrain = deps + mat.Cstrain;\n% \n%     if (mat.TloadIndicator == 0 && mat.Tstrain == 0.0)\n%   "
      "      return ;\n%     end\n% \n%     mat.TrotMax = mat.CrotMax;\n%     mat.TrotMin = mat.CrotMin;\n%     mat.Ten"
      "ergyD = mat.CenergyD;\n%     mat.TrotPu = mat.CrotPu;\n%     mat.TrotNu = mat.CrotNu;\n%     mat.TloadIndicator "
      "= mat.CloadIndicator;\n% \n%     if (mat.TloadIndicator == 0)\n%         if (deps < 0.0)\n%             mat.Tloa"
      "dIndicator = 2;\n%         else\n%             mat.TloadIndicator = 1;\n%         end\n%     end\n% \n%     if ("
      "mat.Tstrain >= mat.CrotMax) \n%         mat.TrotMax = mat.Tstrain;\n%         mat.Ttangent= posEnvlpTangent(mat)"
      ";\n%         mat.Tstress = posEnvlpStress(mat,mat.Tstrain);\n%         mat.TloadIndicator=1;\n%     elseif (mat."
      "Tstrain <= mat.CrotMin) \n%         mat.TrotMin = mat.Tstrain;\n%         mat.Ttangent= negEnvlpTangent(mat);\n%"
      "         mat.Tstress = negEnvlpStress(mat,mat.Tstrain);\n%         mat.TloadIndicator=2;\n%     else \n%        "
      " if (deps < 0.0)\n%             mat=negativeIncrement(mat, deps);\n%         elseif (deps > 0.0)\n%             "
      "mat=positiveIncrement(mat, deps);\n%         end\n%     end\n% \n%     mat.TenergyD = mat.CenergyD + 0.5*(mat.Ts"
      "tress + mat.Cstress)*deps;\n% \n%     % update the state for next time step\n%     mat.CrotMax = mat.TrotMax;\n%"
      "     mat.CrotMin = mat.TrotMin;\n%     mat.CrotPu = mat.TrotPu;\n%     mat.CrotNu = mat.TrotNu;\n%     mat.Cener"
      "gyD = mat.TenergyD;\n%     mat.CloadIndicator = mat.TloadIndicator;\n% \n%     mat.Cstress = mat.Tstress;\n%    "
      " mat.Cstrain = mat.Tstrain;\n% end\n% \n% %% Negative Increment\n% function [mat] = negativeIncrement(mat, deps)"
      "\n%     kn = (mat.CrotMin/mat.rot1n)^mat.beta;\n%     if kn < 1.0 \n%         kn =  1.0; \n%     else kn = 1.0/k"
      "n; \n%     end;\n% \n%     kp = (mat.CrotMax/mat.rot1p)^mat.beta;\n%     if kp < 1.0 \n%         kp =  1.0;\n%  "
      "   else kp = 1.0/kp; \n%     end;\n% \n%     if (mat.TloadIndicator == 1) \n%         mat.TloadIndicator = 2;\n%"
      "         if (mat.Cstress >= 0.0) \n% \n%             mat.TrotPu = mat.Cstrain - mat.Cstress/(mat.Eup* kp);\n%   "
      "          energy = mat.CenergyD -0.5*mat.Cstress/(mat.Eup* kp)*mat.Cstress;\n%             damfc = 0.0;\n% \n%  "
      "           if (mat.CrotMax > mat.rot1p)\n%                 damfc = mat.damfc1*(mat.CrotMax-mat.rot1p)/mat.rot1p "
      "+ ...\n%                     mat.damfc2* energy/ mat.energyA;\n%             end\n%             mat.TrotMin =  m"
      "at.CrotMin*(1.0+ damfc);		\n%         end\n%     end\n% \n%     mat.TloadIndicator = 2;\n% \n%     if mat.TrotMi"
      "n >= mat.rot1n\n%         mat.TrotMin =  mat.rot1n;\n%     end\n% \n%     minmom = negEnvlpStress(mat, mat.TrotM"
      "in);\n%     rotlim = posEnvlpRotlim(mat);\n%     if (rotlim < mat.TrotPu)\n%         rotrel  = rotlim;\n%     el"
      "se\n%         rotrel = mat.TrotPu;\n%     end\n% \n%     rotmp2 = mat.TrotMin - (1.0-mat.pinchY)*minmom/(mat.Eun"
      "*kn);\n%     rotch  = rotrel + (rotmp2-rotrel)*mat.pinchX;     \n% \n%     if (mat.Tstrain > mat.TrotPu) \n%    "
      "     mat.Ttangent = mat.Eup*kp;\n%         mat.Tstress = mat.Cstress + mat.Ttangent*deps;\n%         if (mat.Tst"
      "ress <= 0.0) \n%             mat.Tstress = 0.0;\n%             mat.Ttangent = mat.Eup*1.0e-9;\n%         end\n% "
      "    elseif (mat.Tstrain <= mat.TrotPu && mat.Tstrain > rotch)\n% \n%         if (mat.Tstrain >= rotrel) \n%     "
      "        mat.Tstress = 0.0;\n%             mat.Ttangent = mat.Eun*1.0e-9;\n%         else \n%             mat.Tta"
      "ngent = minmom *mat.pinchY/(rotch-rotrel);\n%             tmpmo1 = mat.Cstress + mat.Eun* kn*deps;\n%           "
      "  tmpmo2 = (mat.Tstrain-rotrel)*mat.Ttangent;\n%             if (tmpmo1 > tmpmo2) \n%                 mat.Tstres"
      "s = tmpmo1;\n%                 mat.Ttangent = mat.Eun*kn;\n%             else\n%                 mat.Tstress = t"
      "mpmo2;\n%             end\n%         end\n%     else \n%         mat.Ttangent = (1.0-mat.pinchY)*minmom/(mat.Tro"
      "tMin-rotch);\n%         tmpmo1 = mat.Cstress + mat.Eun*kn*deps;\n%         tmpmo2 = mat.pinchY*minmom + (mat.Tst"
      "rain-rotch)*mat.Ttangent;\n%         if (tmpmo1 > tmpmo2)\n%             mat.Tstress = tmpmo1;\n%             ma"
      "t.Ttangent = mat.Eun*kn;\n%         else\n%             mat.Tstress = tmpmo2;\n%         end\n%     end\n% end\n"
      "% \n% %% Positive Increment\n% function [mat] = positiveIncrement(mat, deps)\n%     kn = (mat.CrotMin/mat.rot1n)"
      "^mat.beta;\n%     if (kn < 1.0) \n%         kn = 1.0;\n%     else kn = 1.0/kn; \n%     end\n% \n%     kp = (mat."
      "CrotMax/mat.rot1p)^mat.beta;\n%     if (kp < 1.0) \n%         kp = 1.0 ;\n%     else kp =1.0/kp; \n%     end\n% "
      "\n%     if mat.TloadIndicator == 2     \n%         mat.TloadIndicator = 1;\n% \n%         if (mat.Cstress <= 0.0"
      ")         \n%             mat.TrotNu = mat.Cstrain - mat.Cstress/(mat.Eun*kn);\n%             energy = mat.Cener"
      "gyD - 0.5*mat.Cstress/(mat.Eun*kn)*mat.Cstress;\n%             damfc = 0.0;\n%             if (mat.CrotMin < mat"
      ".rot1n)\n%                 damfc = mat.damfc2*energy/mat.energyA+ ...\n%                     mat.damfc1*(mat.Cro"
      "tMin-mat.rot1n)/mat.rot1n;\n%             end\n%             % update rotMax\n%             mat.TrotMax = mat.Cr"
      "otMax*(1.0+damfc);\n%         end\n%     end\n% \n%     mat.TloadIndicator = 1;\n% \n%     if (mat.TrotMax <= ma"
      "t.rot1p) \n%         mat.TrotMax = mat.rot1p;\n%     end\n% \n%     maxmom = posEnvlpStress(mat, mat.TrotMax);\n"
      "%     rotlim = negEnvlpRotlim(mat);\n%     if (rotlim > mat.TrotNu) \n%         rotrel= rotlim;\n%     else rotr"
      "el= mat.TrotNu; \n%     end;\n% \n%     rotmp2 = mat.TrotMax - (1.0-mat.pinchY)*maxmom/(mat.Eup*kp);\n%     rotc"
      "h = rotrel + (rotmp2-rotrel)*mat.pinchX; \n% \n%     if (mat.Tstrain < mat.TrotNu)\n%         mat.Ttangent = mat"
      ".Eun*kn;\n%         mat.Tstress = mat.Cstress + mat.Ttangent*deps;\n%         if (mat.Tstress >= 0.0) \n%       "
      "      mat.Tstress = 0.0;\n%             mat.Ttangent = mat.Eun*1.0e-9;\n%         end\n%     elseif (mat.Tstrain"
      " >= mat.TrotNu && mat.Tstrain < rotch) \n%         if (mat.Tstrain <= rotrel) \n%             mat.Tstress = 0.0;"
      "\n%             mat.Ttangent = mat.Eup*1.0e-9;\n%         else \n%             mat.Ttangent = maxmom*mat.pinchY/"
      "(rotch-rotrel);\n%             tmpmo1 = mat.Cstress + mat.Eup*kp*deps;\n%             tmpmo2 = (mat.Tstrain-rotr"
      "el)*mat.Ttangent;\n%             if (tmpmo1 < tmpmo2) \n%                 mat.Tstress = tmpmo1;\n%              "
      "   mat.Ttangent = mat.Eup*kp;\n%             else\n%                 mat.Tstress = tmpmo2;\n%             end\n%"
      "         end\n%     else\n%         mat.Ttangent = (1.0-mat.pinchY)*maxmom/(mat.TrotMax-rotch);\n%         tmpmo"
      "1 = mat.Cstress + mat.Eup*kp*deps;\n%         tmpmo2 = mat.pinchY*maxmom + (mat.Tstrain-rotch)*mat.Ttangent;\n% "
      "        if (tmpmo1 < tmpmo2) \n%             mat.Tstress = tmpmo1;\n%             mat.Ttangent = mat.Eup*kp;\n% "
      "        else\n%             mat.Tstress = tmpmo2;\n%         end\n%     end\n% end\n% \n% %% Positive Envelope T"
      "angent\n% function [posTangent] = posEnvlpTangent(mat)     \n%     if (mat.Tstrain <= 0.0)\n%         posTangent"
      "= mat.E1p*1.0e-9;\n%     elseif (mat.Tstrain <= mat.rot1p)\n%         posTangent= mat.E1p;\n%     elseif (mat.Ts"
      "train <= mat.rot2p)\n%         posTangent= mat.E2p;\n%     elseif (mat.Tstrain <= mat.rot3p || mat.E3p > 0.0)\n%"
      "         posTangent= mat.E3p;\n%     else\n%         posTangent= mat.E1p*1.0e-9;\n%     end\n% end    \n% \n% %%"
      " Negative Envelope Tangent\n% function [negTangent] = negEnvlpTangent( mat)   \n%     if (mat.Tstrain > 0.0)\n% "
      "        negTangent= mat.E1n*1.0e-9;\n%     elseif (mat.Tstrain >= mat.rot1n)\n%         negTangent= mat.E1n;\n% "
      "    elseif (mat.Tstrain >= mat.rot2n)\n%         negTangent= mat.E2n;\n%     elseif (mat.Tstrain >= mat.rot3n ||"
      " mat.E3n > 0.0)\n%         negTangent= mat.E3n;\n%     else\n%         negTangent= mat.E1n*1.0e-9;\n%     end\n%"
      " end\n% \n% %% Positive Envelope Stress\n% function [posStress] = posEnvlpStress(mat, strain)         \n%     if"
      " (strain <= 0.0)\n%         posStress = 0.0;\n%     elseif (strain <= mat.rot1p)\n%         posStress = mat.E1p*"
      "strain;\n%     elseif (strain <= mat.rot2p)\n%         posStress = mat.mom1p + mat.E2p*(strain-mat.rot1p);\n%   "
      "  elseif (strain <= mat.rot3p || mat.E3p > 0.0)\n%         posStress = mat.mom2p + mat.E3p*(strain-mat.rot2p);\n"
      "%     else\n%         posStress = mat.mom3p;\n%     end\n% end\n%       \n% %% Negative Envelope Stress\n% funct"
      "ion [negStress] = negEnvlpStress(mat, strain)        \n%     if (strain >= 0.0)\n%         negStress = 0.0;\n%  "
      "   elseif (strain >= mat.rot1n)\n%         negStress = mat.E1n*strain;\n%     elseif (strain >= mat.rot2n)\n%   "
      "      negStress = mat.mom1n + mat.E2n*(strain-mat.rot1n);\n%     elseif (strain >= mat.rot3n || mat.E3n > 0.0)\n"
      "%         negStress = mat.mom2n + mat.E3n*(strain-mat.rot2n);\n%     else\n%         negStress = mat.mom3n;\n%  "
      "   end\n% end\n% \n% %% Negative Envelope Rotation Limit\n% function [neglimit] = negEnvlpRotlim(mat)\n%     neg"
      "limit =  -1.0e16;\n% \n%     if (mat.CrotMin >= mat.rot1n) \n%         neglimit = -1.0e16; \n%     end;\n%     i"
      "f (mat.CrotMin < mat.rot1n && mat.CrotMin >= mat.rot2n && mat.E2n < 0.0)\n%         neglimit = mat.rot1n - mat.m"
      "om1n/mat.E2n;\n%     end;\n%     if (mat.CrotMin < mat.rot2n && mat.E3n < 0.0) \n%         neglimit = mat.rot2n "
      "- mat.mom2n/mat.E3n;\n%     end;\n% \n%     if (neglimit ==  -1.0e16) \n%         neglimit = -1.0e16; \n%     el"
      "seif (negEnvlpStress(mat, neglimit) < 0)\n%         neglimit = -1.0e16; \n%     end\n% end\n% \n% %% Positive En"
      "velope Rotation Limit\n% function [poslimit] = posEnvlpRotlim(mat)\n%     poslimit =  1.0e16;\n% \n%     if (mat"
      ".CrotMax <= mat.rot1p) \n%         poslimit =  1.0e16; \n%     end;\n%     if (mat.CrotMax > mat.rot1p && mat.Cr"
      "otMax <= mat.rot2p && mat.E2p < 0.0)\n%         poslimit = mat.rot1p - mat.mom1p/mat.E2p;\n%     end;\n%     if "
      "(mat.CrotMax > mat.rot2p && mat.E3p < 0.0)\n%         poslimit = mat.rot2p - mat.mom2p/mat.E3p;\n%     end;\n% \n"
      "%     if (poslimit == 1.0e16)\n%         poslimit = 1.0e16;\n%     elseif (posEnvlpStress(mat,poslimit) > 0)\n% "
      "        poslimit = 1.0e16;\n%     end\n% end\n% %%%%%%%%%%%%%%%%%%%% End of Hysteretic Material%% %%%%%%%%%%%%%%"
      "%%%%%%%%%%%\n \nfunction [BW]= BoucWen( dx, BW, vcur)\n    % ---------------------------------------------\n    "
      "% x,v: displacement and velocity\n    %   Q: restoring force\n    %   z: hysteretic component\n    %  zj: z in n"
      "ext step, i.e. z_i+1\n    %  BW: numerous parameters for Bouc-Wen model\n    %   i: step number\n\n    xcur =  d"
      "x + BW.Uprev;\n    % Fourth order R-K forward integration\n    dz1 = dx*f(BW,vcur,BW.zj);\n    dz2 = dx*f(BW,vcu"
      "r,BW.zj+dz1/2);\n    dz3 = dx*f(BW,vcur,BW.zj+dz2/2);\n    dz4 = dx*f(BW,vcur,BW.zj+dz3);\n    zj = BW.zj + (dz1"
      "+2*dz2+2*dz3+dz4)/6;\n\n    umax=(abs(BW.Dmin)+ BW.Dmax)*0.5;    \n    BW.k=BW.k1*exp(-umax/BW.uref) + BW.k2;   "
      " \n    BW.Qj = BW.c*(abs(vcur)^BW.a)*sign(vcur) + BW.alpha*BW.k*xcur +...\n        (1-BW.alpha)*BW.k*BW.uy*zj;\n"
      "\n    % update deformation for next time step\n    BW.Uprev = xcur;\n    BW.Dmax= max(xcur,BW.Dmax); \n    BW.Dm"
      "in= min(xcur,BW.Dmin); \n    BW.zj =  zj;\nend\n\nfunction y=f(BW,v,z)\n    % This function describes the nonlin"
      "ear differential equation that governs\n    % the hysteretic component, z.\n    % The returned value is \"dz/dx\""
      " or \"z_dot/x_dot\"\n    y =(1/BW.uy)*(1-BW.beta*sign(v)*abs(z)^BW.n*sign(z)-BW.gamma1*abs(z)^BW.n);\nend\n%%%%%"
      "%%%%%%%%%%%%%% End of Bouc-Wen Model %%%%%%%%%%%%%%%%%%%%%%%% \n\nfunction [pro] = trilinear(dx, pro)\n    % cal"
      "culate current deformation \n        x = pro.xprev + dx; \n\n    if pro.YieldCode == 0\n\n        pro.Fs1 = pro."
      "Fs1+pro.K1*dx;\n        pro.Fs2 = pro.Fs2+pro.K2*dx;\n        % if it is beyond elastic range, limit to yield fo"
      "rce\n        % and set m_nYieldCode to 1\n        if pro.Fs1 > pro.Fy1\n\n            pro.Fs1 = pro.Fy1 ;\n     "
      "       pro.YieldCode = 1;\n\n            if(pro.Fs2> pro.Fy2)\n                pro.Fs2 = pro.Fy2 ;\n            "
      "    pro.YieldCode = 2;\n            end\n        elseif pro.Fs1 < -pro.Fy1\n\n            pro.Fs1 = -pro.Fy1;\n "
      "           pro.YieldCode = 1 ;\n\n            if pro.Fs2 < -pro.Fy2\n                pro.Fs2 = - pro.Fy2 ;\n    "
      "            pro.YieldCode = 2;\n            end\n        end\n    % 1st post-yielding region    \n    elseif pro"
      ".YieldCode == 1\n\n        % assume spring2 remain elastic\n        pro.Fs2= pro.Fs2+pro.K2*dx;\n\n        % kee"
      "p loading\n        if pro.Fs1*dx > 0.\n            if pro.Fs2 > pro.Fy2\n                pro.Fs2 = pro.Fy2;\n   "
      "             pro.YieldCode=2;            \n            elseif pro.Fs2 < -pro.Fy2\n                pro.Fs2 = -pro"
      ".Fy2;\n                pro.YieldCode=2;\n            end\n            % unloading\n        elseif pro.Fs1*dx < 0"
      ".\n            pro.Fs1= pro.Fs1 + pro.K1*dx;\n            pro.YieldCode = 0;\n\n            if pro.Fs1 < -pro.Fy"
      "1 \n                pro.Fs1 = -pro.Fy1;\n                pro.YieldCode = 1;\n                if pro.Fs2 < -pro.F"
      "y2\n                    pro.Fs2 = -pro.Fy2;\n                    pro.YieldCode = 2;\n                end\n      "
      "      elseif pro.Fs1 > pro.Fy1\n                pro.Fs1 = pro.Fy1;\n                pro.YieldCode = 1;\n        "
      "        if pro.Fs2 > pro.Fy2\n                    pro.Fs2 = pro.Fy2;\n                    pro.YieldCode = 2;\n  "
      "              end\n            end\n        end\n    elseif pro.YieldCode ==2\n        % unloading\n        if ("
      "pro.Fs1*dx) < 0.\n            pro.Fs1 = pro.Fs1 + pro.K1*dx;\n            pro.Fs2 = pro.Fs2 + pro.K2*dx;\n      "
      "      pro.YieldCode = 0;\n\n            if pro.Fs1 < -pro.Fy1\n                pro.Fs1 = -pro.Fy1;\n            "
      "    pro.YieldCode = 1;\n                if pro.Fs2 < -pro.Fy2\n                    pro.Fs2 = -pro.Fy2;\n        "
      "            pro.YieldCode = 2;\n                end            \n            elseif pro.Fs1 > pro.Fy1\n         "
      "       pro.Fs1 = pro.Fy1;\n                pro.YieldCode = 1;\n                if pro.Fs2> pro.Fy2\n            "
      "        pro.Fs2 = pro.Fy2;\n                    pro.YieldCode = 2;\n                end\n            end\n      "
      "  end\n    end\n\n    pro.Fs = pro.Fs1 + pro.Fs2 + pro.K3*x;\n\n    % updata current state for next time step\n "
      "   if pro.YieldCode == 0\n        pro.Kt = pro.K1 +pro.K2 +pro.K3;\n    elseif pro.YieldCode == 1\n        pro.K"
      "t = pro.K2 +pro.K3;    \n    else\n        pro.Kt = pro.K3;\n    end\n    pro.xprev = x;\nend\n% \n% function [m"
      "at]= SDegrading(dx, mat)\n%     %	[mat]=SDegrading(dx,mat) For incremental deformation, dx\n%     %	and mat comp"
      "ute new properties for SDegrading material.\n%     %	mat variables are defined in CreateMaterial.m\n%     %   Li"
      "ne search algorithm is used to search for the current state\n% \n%     % local variables\n%     % accFac	: accum"
      "ulated factor to trace out nonlinear path\n%     % factor	: factor used to trace out nonlinear path\n%     % fac"
      "	    : factor used to trace out nonlinear path\n%     % dF        :\n%     % uZero     :\n%     % \n% \n%     dF"
      " = 0;	\n%     accFac = 0.;\n% \n%     while (accFac < 0.99999999)\n% \n%         factor = 1.0 - accFac;\n%      "
      "   % current state is in elastic branch\n%         if (mat.StateCode == 1)\n%             % elastically loading\n"
      "%             if (dx>0.)\n%                 fac = (mat.Fyp-mat.Fs)/(mat.K1p*dx);\n%                 if(fac<facto"
      "r)\n%                     factor = fac;\n%                     mat.StateCode = 2;\n%                 end\n%     "
      "        elseif (dx<0.)\n%                 % in negative spring force\n%                 fac = -mat.Fs/(mat.K1p*d"
      "x);\n%                 % change in state\n%                 if (fac < factor)\n%                     factor = fa"
      "c;\n%                     mat.StateCode = -1;\n%                 end\n%             end\n%             dF = mat."
      "K1p*dx;\n% \n%         elseif (mat.StateCode == -1)\n% \n%             % elastically loading\n%             if ("
      "dx<0.)\n%                 fac = (mat.Fyn-mat.Fs)/(mat.K1n*dx);\n%                 if(fac<factor)\n%             "
      "        factor = fac;\n%                     mat.StateCode = -2;\n%                 end\n%                 % ela"
      "stically unloading\n%             elseif (dx>0.)\n%                 % in negative spring force\n%               "
      "  fac = -mat.Fs/(mat.K1n*dx);\n%                 % change in state\n%                 if(fac < factor)\n%       "
      "              factor = fac;\n%                     mat.StateCode = 1;\n%                 end\n%             end\n"
      "%             dF = mat.K1n*dx;\n%             % current state is in yielding branch\n%         elseif (mat.State"
      "Code == 2)\n% \n%             % elastically unloading along the line 5\n%             if(dx < 0.)\n%            "
      "     factor =0.;\n%                 mat.StateCode = 5;\n%                 mat.Umax = mat.Us;\n%                 "
      "mat.Fmax = mat.Fs;\n%                 % continue to yield\n%             elseif (dx > 0.)\n%                 fac"
      " = (mat.Uup - mat.Us) / dx;\n%                 if(fac<factor)\n%                     factor = fac;\n%           "
      "          mat.StateCode  = 3;\n%                 end\n%                 dF = mat.K2p*dx;\n%            %     mat"
      ".Fmax = mat.Fs;\n%            %     mat.Umax = mat.Us;\n%             end\n% \n%         elseif (mat.StateCode ="
      "= -2)\n% \n%             % elastically unloading along the line 5\n%             if (dx > 0.)\n%                "
      " factor =0.;\n%                 mat.StateCode = -5;\n%                 mat.Umin = mat.Us;\n%                 mat"
      ".Fmin = mat.Fs;\n%                 % continue to yield\n%             elseif (dx <0.)\n%                 fac = ("
      "mat.Uun - mat.Us) / dx;\n%                 if(fac<factor)\n%                     factor = fac;\n%               "
      "      mat.StateCode = -3;\n%                 end\n%                 dF = mat.K2n*dx;\n%         %        mat.Fmi"
      "n = mat.Fs;\n%         %        mat.Umin = mat.Us;\n%             end\n%             % current state is in desce"
      "nding branch\n%         elseif ( mat.StateCode == 3)\n% \n%            %	 elastically unloading\n%             i"
      "f (dx < 0.)\n%                 factor =0.;\n%                 mat.StateCode = 5;\n%                 % in positiv"
      "e spring force\n%                 mat.Umax = mat.Us;\n%                 mat.Fmax = mat.Fs;\n%                 % "
      "continue to yield\n%             elseif (dx > 0.)\n%                 % in positive spring force\n%              "
      "   fac = (mat.Frp-mat.Fs) /(mat.K3p*dx);\n%                 % change in state\n%                 if (fac<factor)"
      "\n%                     factor = fac;\n%                     mat.StateCode  = 4;\n%                 end\n%      "
      "           dF = mat.K3p*dx;\n%             end\n%         elseif ( mat.StateCode == -3)\n% \n%              % el"
      "astically unloading\n%             if (dx > 0.)\n%                 factor =0.;\n%                 mat.StateCode "
      "= -5;\n%                 % in positive spring force\n%                 mat.Umin = mat.Us;\n%                 mat"
      ".Fmin = mat.Fs;\n%                 % continue to yield\n%             elseif (dx < 0.)\n%                 % in p"
      "ositive spring force\n%                 fac = (mat.Frn-mat.Fs) /(mat.K3n*dx);\n%                 % change in sta"
      "te\n%                 if (fac<factor)\n%                     factor = fac;\n%                     mat.StateCode "
      " = -4;\n%                 end\n%                 dF = mat.K3n*dx;\n%             end\n%         elseif (mat.Stat"
      "eCode == 4)\n% \n%             % elastically unloading\n%             if(dx < 0.)\n%                 factor =0.;"
      "\n%                 mat.StateCode = 5;\n%                 mat.Umax = mat.Us;\n%                 mat.Fmax = mat.F"
      "s;\n%             elseif (dx > 0.)\n%                 dF = mat.K4p*dx;\n%             end\n% \n%         elseif "
      "(mat.StateCode == -4)\n% \n%             % elastically unloading\n%             if (dx > 0.)\n%                 "
      "factor =0.;\n%                 mat.StateCode = -5;\n%                 mat.Umin = mat.Us;\n%                 mat."
      "Fmin = mat.Fs;\n%             elseif (dx < 0.)\n%                 dF = mat.K4n*dx;\n%             end\n%        "
      "     % unloading branch\n%         elseif (mat.StateCode == 5)\n% \n%             % elastically reloading branch"
      "\n%             if ( dx > 0.)\n%                 fac = (mat.Fmax - mat.Fs)/(mat.K1p*dx);\n%                 if(f"
      "ac < factor)\n%                     % update factor\n%                     factor = fac;\n%                     "
      "if mat.Umax >= mat.Urp\n%                         mat.StateCode = 4;\n%                     elseif mat.Umax >= m"
      "at.Uup\n%                         mat.StateCode = 3;                    \n%                     elseif mat.Umax "
      ">= mat.Uyp\n%                         mat.StateCode = 2;\n%                     end\n%                 end\n%   "
      "          elseif ( dx < 0.)\n%                 fac =  -mat.Fs/(mat.K1p*dx);\n%                 if(fac < factor)\n"
      "%                     factor = fac;\n%                     mat.StateCode = -6;\n%                     uZero = ma"
      "t.Us+factor*dx;\n%                     mat.K6	= mat.Fmin/(mat.Umin-uZero);\n%                 end\n%            "
      " end\n%             dF = mat.K1p*dx;\n% \n%         elseif (mat.StateCode == -5)\n% \n%             % elasticall"
      "y reloading branch\n%             if( dx < 0.)\n%                 fac = (mat.Fmin - mat.Fs)/(mat.K1n*dx);\n%    "
      "             if (fac < factor)\n%                     % update factor\n%                     factor = fac;\n%   "
      "                  if mat.Umin <= -mat.Urn\n%                         mat.StateCode = -4;\n%                     "
      "elseif mat.Umin <= -mat.Uun\n%                         mat.StateCode = -3;                    \n%               "
      "      elseif mat.Umin <= -mat.Uyn\n%                         mat.StateCode = -2;\n%                     end\n%  "
      "               end\n%             elseif ( dx > 0.)\n%                 fac = -mat.Fs/(mat.K1n*dx);\n%           "
      "      if (fac < factor)\n%                     factor = fac;\n%                     mat.StateCode = 6;\n%       "
      "              uZero = mat.Us+factor*dx;\n%                     mat.K6	= mat.Fmax/(mat.Umax-uZero);\n%           "
      "      end\n%             end\n%             dF = mat.K1n*dx;\n% \n%             % current state is in shooting b"
      "ranch\n%         elseif (mat.StateCode == 6)\n% \n%             % elastically unloading\n%             if (dx< 0"
      ".)\n%                 factor = 0.;\n%                 mat.StateCode = 7;\n%                 mat.Ftem = mat.Fs;\n"
      "%                 mat.Utem = mat.Us;\n%                 % continue to shoot\n%             elseif (dx> 0.)\n%   "
      "              fac = (mat.Umax-mat.Us)/dx;\n%                 if (fac<factor)\n%                     factor = fac"
      ";\n%                     if mat.Umax >= mat.Urp\n%                         mat.StateCode = 4;\n%                "
      "     elseif mat.Umax >= mat.Uup\n%                         mat.StateCode = 3;                    \n%            "
      "         elseif mat.Umax >= mat.Uyp\n%                         mat.StateCode = 2;\n%                     end\n% "
      "                end\n%                 dF = mat.K6*dx;\n%             end\n% \n%         elseif (mat.StateCode ="
      "= -6)\n% \n%             % elastically unloading\n%             if(dx>0.)\n%                 factor = 0.;\n%    "
      "             mat.StateCode = -7;\n%                 mat.Ftem = mat.Fs;\n%                 mat.Utem = mat.Us;\n% "
      "            elseif (dx<0.)\n%                 fac = (mat.Umin-mat.Us)/dx;\n%                 if (fac< factor)\n%"
      "                     factor= fac;\n%                     if mat.Umin <= mat.Urn\n%                         mat.S"
      "tateCode = -4;\n%                     elseif mat.Umin <= mat.Uun\n%                         mat.StateCode = -3; "
      "                   \n%                     elseif mat.Umin <= mat.Uyn\n%                         mat.StateCode ="
      " -2;\n%                     end\n%                 end\n%                 dF = mat.K6*dx;\n%             end\n% "
      "\n%             % unloading branch off shooting branch\n%         elseif (mat.StateCode == 7)\n% \n%            "
      " % elastically reloads\n%             if(dx>0.)\n%                 fac = (mat.Utem -mat.Us)/dx;\n%              "
      "   if (fac < factor)\n%                     factor  = fac;\n%                     mat.StateCode  = 6;\n%        "
      "         end\n%                 % continue unloading elastically\n%             elseif (dx<0.)\n%               "
      "  fac = -mat.Fs/(mat.K1p*dx);\n%                 % change in state\n%                 if (fac < factor)\n%      "
      "               factor = fac;\n%                     mat.StateCode =-6;\n%                     % update stiffness"
      " in line 6\n%                     uZero = mat.Us + factor*dx; \n%                     mat.K6 = mat.Fmin/(mat.Umi"
      "n-uZero);\n%                 end\n%             end\n%             dF = mat.K1p*dx;\n% \n%         elseif (mat.S"
      "tateCode == -7)\n% \n%             % elastically reloads\n%             if(dx<0.)\n%                 fac = (mat."
      "Utem -mat.Us)/dx;\n%                 if(fac < factor)\n%                     factor  = fac;\n%                  "
      "   mat.StateCode  = -6;\n%                 end\n%                 % continue unloading elastically\n%           "
      "  elseif (dx>0.)\n%                 fac = -mat.Fs/(mat.K1n*dx);\n%                 % change in state\n%         "
      "        if (fac < factor)\n%                     factor = fac;\n%                     mat.StateCode =6;\n%      "
      "               % update stiffness in line 6\n%                     uZero =mat.Us + factor*dx;\n%                "
      "     mat.K6 = mat.Fmax/(mat.Umax-uZero);\n%                 end\n%             end\n%             dF = mat.K1n*d"
      "x;\n% \n%         else\n%             % do nothing\n%         end\n% \n%         % update state\n%         mat.U"
      "s = mat.Us + factor*dx;\n%         mat.Fs= mat.Fs + factor*dF;\n% \n%         accFac = accFac+factor;\n%     end"
      "\n% \n%     % update stiffness at the current state\n%     if mat.StateCode == 1\n%         mat.Ktan = mat.K1p;\n"
      "%     elseif mat.StateCode == -1\n%         mat.Ktan = mat.K1n;    \n%     elseif mat.StateCode == 2\n%         "
      "mat.Ktan = mat.K2p;\n%     elseif mat.StateCode == -2\n%         mat.Ktan = mat.K2n;    \n%     elseif (mat.Stat"
      "eCode) == 3\n%         mat.Ktan = mat.K3p;\n%     elseif (mat.StateCode) == -3\n%         mat.Ktan = mat.K3n;\n%"
      "     elseif (mat.StateCode) == 4\n%         mat.Ktan = mat.K4p;\n%     elseif (mat.StateCode) == -4\n%         m"
      "at.Ktan = mat.K4n;\n%     elseif abs(mat.StateCode) == 6\n%         mat.Ktan = mat.K6;\n%     end\n% end\n% \n% "
      "% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n% % function [mat]= ModifiedBW(dx, v, "
      "mat)\n% % % Modified Bouc-Wen model hysteresis model\n% % % C. P. Heine (2001). Simulated response of degrading "
      "hysteretic joints with slack behaviour. PhD dissertation. \n% % % Virginial Polytechnic Institute and State Univ"
      "ersity. Blacksburg, Virginia \n% % % URL: http://scholar.lib.vt.edu/theses/available/etd-08092001-100756\n% % % "
      "Employ the 4th order Runge-Kutta forward integration\n% % \n% % % ---------------------------------------------\n"
      "% % % x,v: displacement and velocity\n% % %   Q: restoring force\n% % %   z: hysteretic component\n% % %  zj: z "
      "in next step, i.e. z_i+1\n% % %  MBW: numerous parameters for Modified Bouc-Wen model\n% % %   i: step number\n%"
      " % \n% %     xcur = dx+ mat.UPrev;\n% %     \n% % % Fourth order R-K forward integration\n% %     dz1 = dx*G(mat"
      ", v, mat.z, mat.e);\n% %     de1 = dx*F(mat, mat.z);\n% %     dz2 = dx*G(mat, v, mat.z+dz1/2, mat.e +de1/2);\n% "
      "%     de2 = dx*F(mat, mat.z +dz1/2);\n% %     dz3 = dx*G(mat, v, mat.z+dz2/2, mat.e +de2/2);\n% %     de3 = dx*F"
      "(mat, mat.z +dz2/2);\n% %     dz4 = dx*G(mat, v, mat.z+dz3, mat.e +de3);\n% %     de4 = dx*F(mat, mat.z +dz3);\n"
      "% %     \n% %     zj = mat.z + (dz1+2*dz2+2*dz3+dz4)/6;\n% %     ej = mat.e + (de1+2*de2+2*de3+de4)/6;\n% %     "
      "s = Slack(mat, zj); % slack growth\n% % \n% % BW.Qj = s*mat.alpha*mat.k*xcur  + (1-mat.alpha)*mat.k*zj;\n% % \n%"
      " % % update state \n% % mat.UPrev = xcur;\n% % mat.Umax= max(xcur ,mat.Umax); \n% % mat.Umin= min(xcur ,mat.Umin"
      "); \n% % mat.absUmax=max([(abs(mat.Umin)), mat.Umax]);\n% % mat.e = ej;\n% % mat.z = zj;\n% % \n% % function z ="
      " G(mat, v, z, eps)\n% % % This function describes the nonlinear differential equation that governs\n% % % the hy"
      "steretic component, z.\n% % % The returned value is \"dz/dx\" or \"z_dot/x_dot\"\n% % eta  = ETA(mat, eps);\n% %"
      " nu   = NU(mat, eps);\n% % h    = H(mat, z);\n% % a    = A(mat, eps); \n% % z  = h*(1/eta)*(a-nu*(mat.beta*sign("
      "v)*abs(z)^mat.n*sign(z)-mat.gamma1*abs(z)^mat.n));\n% % \n% % function de_du = F(mat, z)\n% % de_du = (1-mat.alp"
      "ha)*mat.k*z;\n% % \n% % function h = H(mat, z)\n% % h = 1-mat.Xi*exp(-z^2./(mat.psi0+ mat.delta_psi*abs(mat.absU"
      "max))^2.);\n% % \n% % function eta =ETA(mat, eps)\n% % eta = 1+ mat.delta_eta*eps;\n% % \n% % function nu = NU(m"
      "at, eps)\n% % nu = 1+ mat.delta_nu*eps;\n% % \n% % function a = A(mat, eps)\n% % a = mat.a0 - mat.delta_a*eps;\n"
      "% % \n% % function s = Slack(mat, z)\n% % s = 1 - exp(-z^2./(mat.psi0+ mat.delta_psi*abs(mat.absUmax))^2.);\n% %"
      " \n% \n% \n"
      editorLayout	      "100 M4x1[85 85 1044 750]"
    }
  }
  junction {
    id			    4
    position		    [23.5747 49.5747 7]
    chart		    2
    linkNode		    [2 0 0]
    subviewer		    2
    ssIdNumber		    3
    type		    CONNECTIVE_JUNCTION
  }
  transition {
    id			    5
    labelString		    "{eML_blk_kernel();}"
    labelPosition	    [32.125 19.875 102.544 14.964]
    fontSize		    12
    src {
      intersection	      [0 0 1 0 23.5747 14.625 0 0]
    }
    dst {
      id		      4
      intersection	      [7 0 -1 -1 23.5747 42.5747 0 0]
    }
    midPoint		    [23.5747 24.9468]
    chart		    2
    linkNode		    [2 0 0]
    dataLimits		    [23.575 23.575 14.625 34.575]
    subviewer		    2
    drawStyle		    SMART
    executionOrder	    1
    ssIdNumber		    2
  }
  data {
    id			    6
    ssIdNumber		    5
    name		    "Total_RF"
    linkNode		    [2 0 7]
    scope		    OUTPUT_DATA
    machine		    1
    props {
      array {
	size			"-1"
      }
      type {
	method			SF_INHERITED_TYPE
	primitive		SF_DOUBLE_TYPE
      }
      complexity	      SF_COMPLEX_INHERITED
      frame		      SF_FRAME_NO
    }
    dataType		    "Inherit: Same as Simulink"
  }
  data {
    id			    7
    ssIdNumber		    6
    name		    "NumFreeDOF"
    linkNode		    [2 6 8]
    scope		    PARAMETER_DATA
    paramIndexForInitFromWorkspace 1
    isNonTunable	    1
    machine		    1
    props {
      array {
	size			"-1"
      }
      type {
	method			SF_INHERITED_TYPE
	primitive		SF_DOUBLE_TYPE
	isSigned		1
	wordLength		"16"
      }
      complexity	      SF_COMPLEX_INHERITED
      frame		      SF_FRAME_INHERITED
    }
    dataType		    "Inherit: Same as Simulink"
  }
  data {
    id			    8
    ssIdNumber		    7
    name		    "Displacement"
    linkNode		    [2 7 9]
    scope		    INPUT_DATA
    machine		    1
    props {
      array {
	size			"-1"
      }
      type {
	method			SF_INHERITED_TYPE
	primitive		SF_DOUBLE_TYPE
	isSigned		1
	wordLength		"16"
      }
      complexity	      SF_COMPLEX_INHERITED
      frame		      SF_FRAME_INHERITED
    }
    dataType		    "Inherit: Same as Simulink"
  }
  data {
    id			    9
    ssIdNumber		    21
    name		    "Velocity"
    linkNode		    [2 8 10]
    scope		    INPUT_DATA
    machine		    1
    props {
      array {
	size			"-1"
      }
      type {
	method			SF_INHERITED_TYPE
	primitive		SF_DOUBLE_TYPE
	isSigned		1
	wordLength		"16"
      }
      complexity	      SF_COMPLEX_INHERITED
      frame		      SF_FRAME_INHERITED
    }
    dataType		    "Inherit: Same as Simulink"
  }
  data {
    id			    10
    ssIdNumber		    8
    name		    "ElementsStruct"
    linkNode		    [2 9 11]
    scope		    PARAMETER_DATA
    isNonTunable	    1
    machine		    1
    props {
      array {
	size			"-1"
      }
      type {
	method			SF_SIMULINK_OBJECT_TYPE
	primitive		SF_DOUBLE_TYPE
	busObject		"ElementStructBus"
	isSigned		1
	wordLength		"16"
      }
      complexity	      SF_COMPLEX_INHERITED
      frame		      SF_FRAME_INHERITED
    }
    dataType		    "Bus: ElementStructBus"
  }
  data {
    id			    11
    ssIdNumber		    10
    name		    "RigidLinkNo"
    linkNode		    [2 10 12]
    scope		    PARAMETER_DATA
    paramIndexForInitFromWorkspace 3
    isNonTunable	    1
    machine		    1
    props {
      array {
	size			"-1"
      }
      type {
	method			SF_INHERITED_TYPE
	primitive		SF_DOUBLE_TYPE
	isSigned		1
	wordLength		"16"
      }
      complexity	      SF_COMPLEX_INHERITED
      frame		      SF_FRAME_INHERITED
    }
    dataType		    "Inherit: Same as Simulink"
  }
  data {
    id			    12
    ssIdNumber		    11
    name		    "RigidLinkNodeID"
    linkNode		    [2 11 13]
    scope		    PARAMETER_DATA
    paramIndexForInitFromWorkspace 4
    isNonTunable	    1
    machine		    1
    props {
      array {
	size			"-1"
      }
      type {
	method			SF_INHERITED_TYPE
	primitive		SF_DOUBLE_TYPE
	isSigned		1
	wordLength		"16"
      }
      complexity	      SF_COMPLEX_INHERITED
      frame		      SF_FRAME_INHERITED
    }
    dataType		    "Inherit: Same as Simulink"
  }
  data {
    id			    13
    ssIdNumber		    12
    name		    "RigidLinkMasterMatrix"
    linkNode		    [2 12 14]
    scope		    PARAMETER_DATA
    paramIndexForInitFromWorkspace 2
    isNonTunable	    1
    machine		    1
    props {
      array {
	size			"-1"
      }
      type {
	method			SF_INHERITED_TYPE
	primitive		SF_DOUBLE_TYPE
	isSigned		1
	wordLength		"16"
      }
      complexity	      SF_COMPLEX_INHERITED
      frame		      SF_FRAME_INHERITED
    }
    dataType		    "Inherit: Same as Simulink"
  }
  data {
    id			    14
    ssIdNumber		    13
    name		    "RigidLinkSlaveMatrix"
    linkNode		    [2 13 0]
    scope		    PARAMETER_DATA
    paramIndexForInitFromWorkspace 5
    isNonTunable	    1
    machine		    1
    props {
      array {
	size			"-1"
      }
      type {
	method			SF_INHERITED_TYPE
	primitive		SF_DOUBLE_TYPE
	isSigned		1
	wordLength		"16"
      }
      complexity	      SF_COMPLEX_INHERITED
      frame		      SF_FRAME_INHERITED
    }
    dataType		    "Inherit: Same as Simulink"
  }
  instance {
    id			    15
    name		    "Numerical Element Calculations"
    machine		    1
    chart		    2
  }
  target {
    id			    16
    name		    "sfun"
    codeFlags		    ""
    machine		    1
    linkNode		    [1 0 17]
  }
  target {
    id			    17
    name		    "rtw"
    codeFlags		    " comments=1 statebitsets=1 databitsets=1 emitlogicalops=1 elseifdetection=1 constantfolding=1 redu"
    "ndantloadelimination=0 preservenames=0 preservenameswithparent=0 exportcharts=0"
    machine		    1
    linkNode		    [1 16 0]
  }
}
